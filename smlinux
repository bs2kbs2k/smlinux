#!/bin/bash
# Super Mario 64 Install * Build * Update Script for Linux and macOS
# This scrupt will do everything required to build & install Super Mario 64 under Ubuntu or macOS.
# Other distros will need to edit config file when prompted to change Linux= command.
# Dependencies for many distros are listed on the github FAQ.  
# Please let me know if incorrect or if you have another distro to add.
# Sript updates from github.com/enigma9o7/smlinux unless AutoUpdate=0 in configfile.
TIMESTAMP=2020-1017-2303

domake(){
#Here We go & music to build to
if ( [ -f /usr/bin/mplayer ] || [ -f /bin/mplayer ] )  && [ -f "$SMLINUX"/File_Select_64_slowed_down.mp3 ]; then
	if [ -f "$BASEPATH"/"$PRESET"/sound/samples/sfx_mario/0C.aiff ]; then
		sh -c 'mplayer -nolirc -really-quiet '"$BASEPATH"/"$PRESET"'/sound/samples/sfx_mario/0C.aiff;mplayer -nolirc -really-quiet -volume 40 -loop 0 '"$SMLINUX"'/File_Select_64_slowed_down.mp3&'
	elif [ -f "$BASEPATH"/sm64ex/sound/samples/sfx_mario/0C.aiff ]; then
		sh -c 'mplayer -nolirc -really-quiet '"$BASEPATH"'/sm64ex/sound/samples/sfx_mario/0C.aiff;mplayer -nolirc -really-quiet -volume 40 -loop 0 '"$SMLINUX"'/File_Select_64_slowed_down.mp3&'
	else
		sh -c 'mplayer -nolirc -really-quiet -volume 40 -loop 0 '"$SMLINUX"'/File_Select_64_slowed_down.mp3&'
	fi
fi 
if [ "$TARGET_WEB" = 1 ] && [ "$InstallHD" = 1 ]; then
	sed -i.bak 's/TOTAL_MEMORY=20MB/TOTAL_MEMORY=40MB/g' "$BASEPATH"/"$PRESET"/Makefile
elif [ "$TARGET_WEB" = 1 ]; then
	sed -i.bak 's/TOTAL_MEMORY=20MB/TOTAL_MEMORY=30MB/g' "$BASEPATH"/"$PRESET"/Makefile
fi

if [ "$OSX_BUILD" = 1 ]; then
    if [ "$EXTERNAL_DATA" = 1 ]; then 	
    	sed -i.bak 's/@echo -n > $(BASEPACK_LST)/#/g' "$BASEPATH"/"$PRESET"/Makefile
    fi
    if [ "$GIT" = "djoslin0/sm64ex-coop" ]; then
		sed -i.bak 's/sdk\/discord_game_sdk.dylib/sdk\/libdiscord_game_sdk.dylib/g' "$BASEPATH"/"$PRESET"/Makefile
		cp "$BASEPATH"/"$PRESET"/lib/discordsdk/discord_game_sdk.dylib "$BASEPATH"/"$PRESET"/lib/discordsdk/libdiscord_game_sdk.dylib
	elif [ "$PRESET" = "render96ex" ] || [ "$PRESET" = "r96proto" ]; then
		sed -i.bak 's/#include <malloc.h>/\/\/ # include <malloc.h>/g' "$BASEPATH"/"$PRESET"/tools/n64graphics_ci_dir/exoquant/exoquant.c
	fi
fi

if [ ! "$ANDROID" = 0 ]; then
	exec 2> >(grep -v GtkDialog >&2) # Supress GTK Dialog Warnings
	checkphone
	if [ "$GOTPHONE" = 1 ]; then
		zenity --info --text='\nPhone Detected.  Be sure to grant it debugging permission.\n\nExisting copies must also be uninstalled before this window closes itself.' --title="Preparing for Android Installation...." --width=500 &disown
	else
		echo "If you want the app installed to your Android device,"
		echo "plug it in now via USB and grant it debugging permission."
		zenity --info --text='\nIf you want the app installed to your Android device, attach it via USB.\n\nUnlock and grant your pc debugging permission before this window closes itself.\n\nExisting copies must also be uninstalled from device.' --title="Preparing for Android Installation...." --width=480 &disown
		echo
	fi
fi
if [ "$PRESET" = "sm64nx" ]; then
	sed -i.bak 's/-no-pie -lpthread -lzstd/-no-pie -lpthread -lzstd -lstdc++fs/g' "$BASEPATH"/"$PRESET"/Makefile
fi
if [ -f "$SMLINUX"/buildlog.txt ]; then
	mv -f "$SMLINUX"/buildlog.txt "$SMLINUX"/buildlog.old
fi
echo VERSION=$VERSION RENDER_API=$RENDER_API TARGET_WEB=$TARGET_WEB TARGET_RPI=$TARGET_RPI OSX_BUILD=$OSX_BUILD TEXTSAVES=$TEXTSAVES  -j"$MAXJOBS"
echo BETTERCAMERA=$BETTERCAMERA NODRAWINGDISTANCE=$NODRAWINGDISTANCE TEXTURE_FIX=$TEXTURE_FIX EXTERNAL_DATA=$EXTERNAL_DATA DISCORDRPC=$DISCORDRPC 
echo LEGACY_RES=$LEGACY_RES IMMEDIATELOAD=$IMMEDIATELOAD DISCORD_SDK=$DISCORD_SDK ENABLE_OPENGL_LEGACY=$ENABLE_OPENGL_LEGACY DOS_GL=$DOS_GL 
echo DEBUG=$DEBUG WINDOW_API=$WINDOW_API CONTROLLER_API=$WINDOW_API AUDIO_API=$WINDOW_API
if [ "$OSX_BUILD" = 1 ]; then
	cd "$BASEPATH"/"$PRESET"/tools
	gmake CC=/usr/local/bin/gcc-9 CXX=/usr/local/bin/g++-9 CPP=/usr/local/bin/gcc-9 OSX_BUILD=1 TARGET_OSX=1 -j"$MAXJOBS"
	if [ ! -f skyconv ]; then
		echo Dealing with that error...
		gmake CC=/usr/bin/gcc CXX=/usr/bin/g++ OSX_BUILD=1 TARGET_OSX=1 -j"$MAXJOBS"
		make OSX_BUILD=1 TARGET_OSX=1 -j"$MAXJOBS"
	fi
	if [ -d /usr/local/opt/sdl2/include/SDL2 ] && [ ! -d "$BASEPATH"/"$PRESET"/include/SDL2 ]; then
		ln -s /usr/local/opt/sdl2/include/SDL2 "$BASEPATH"/"$PRESET"/include
	fi
	cd "$BASEPATH"/"$PRESET"
	time gmake CC=/usr/local/bin/gcc-9 CXX=/usr/local/bin/g++-9 CPP=/usr/local/bin/gcc-9 OSX_BUILD=1 TARGET_OSX=1 BETTERCAMERA=$BETTERCAMERA NODRAWINGDISTANCE=$NODRAWINGDISTANCE TEXTURE_FIX=$TEXTURE_FIX EXTERNAL_DATA=$EXTERNAL_DATA DISCORDRPC=$DISCORDRPC VERSION=$VERSION RENDER_API=$RENDER_API TARGET_WEB=$TARGET_WEB TEXTSAVES=$TEXTSAVES -j"$MAXJOBS" LEGACY_RES=$LEGACY_RES DEBUG=$DEBUG IMMEDIATELOAD=$IMMEDIATELOAD TARGET_RPI=$TARGET_RPI ENABLE_OPENGL_LEGACY=$ENABLE_OPENGL_LEGACY DOS_GL=$DOS_GL DISCORD_SDK=$DISCORD_SDK WINDOW_API=$WINDOW_API CONTROLLER_API=$WINDOW_API AUDIO_API=$WINDOW_API> "$SMLINUX"/buildlog.txt
	if [ -f "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/libdiscord_game_sdk.dylib ] && [ ! -f "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/discord_game_sdk.dylib ]; then
		cp "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/libdiscord_game_sdk.dylib "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/discord_game_sdk.dylib
	fi
else
	cd "$BASEPATH"/"$PRESET"
	time make BETTERCAMERA=$BETTERCAMERA NODRAWINGDISTANCE=$NODRAWINGDISTANCE TEXTURE_FIX=$TEXTURE_FIX EXTERNAL_DATA=$EXTERNAL_DATA DISCORDRPC=$DISCORDRPC VERSION=$VERSION RENDER_API=$RENDER_API TARGET_WEB=$TARGET_WEB TEXTSAVES=$TEXTSAVES -j"$MAXJOBS" LEGACY_RES=$LEGACY_RES DEBUG=$DEBUG IMMEDIATELOAD=$IMMEDIATELOAD TARGET_RPI=$TARGET_RPI ENABLE_OPENGL_LEGACY=$ENABLE_OPENGL_LEGACY DOS_GL=$DOS_GL DISCORD_SDK=$DISCORD_SDK WINDOW_API=$WINDOW_API CONTROLLER_API=$WINDOW_API AUDIO_API=$WINDOW_API > "$SMLINUX"/buildlog.txt
fi
if [ ! "$ANDROID" = 0 ]; then
	if [ "ARMONLY" = 1 ]; then
		echo Reming x86 x64
		sed -i.bak "s/v8a', 'x86', 'x86_64'/v8a'/g" "$BASEPATH"/"$PRESET"/../../build.gradle
	fi
	if [ "$BRANCH" = "sm64ex" ] || [ "$BRANCH" = "sm64ex_nightly" ]; then
		make BETTERCAMERA=$BETTERCAMERA NODRAWINGDISTANCE=$NODRAWINGDISTANCE TEXTURE_FIX=$TEXTURE_FIX EXTERNAL_DATA=$EXTERNAL_DATA DISCORDRPC=$DISCORDRPC VERSION=$VERSION RENDER_API=$RENDER_API TARGET_WEB=$TARGET_WEB TEXTSAVES=$TEXTSAVES -j"$MAXJOBS" LEGACY_RES=$LEGACY_RES DEBUG=$DEBUG  WINDOW_API=$WINDOW_API CONTROLLER_API=$WINDOW_API AUDIO_API=$WINDOW_API> "$SMLINUX"/buildlog.txt
		sed -i.bak '/include $(BUILD_SHARED_LIBRARY)/i TEXTURE_FIX ?= 0\nNODRAWINGDISTANCE ?= 0\nBETTERCAMERA ?= 0\nifeq ($(TEXTURE_FIX),1)\n  LOCAL_CFLAGS += -DTEXTURE_FIX\nendif\nifeq ($(NODRAWINGDISTANCE),1)\n  LOCAL_CFLAGS += -DNODRAWINGDISTANCE\nendif\nifeq ($(BETTERCAMERA),1)\n  LOCAL_CFLAGS += -DBETTERCAMERA\nendif\n' "$BASEPATH"/"$PRESET"/Android.mk
	fi
	if [ ! -f "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64."$VERSION".f3dex2* ]; then
		if [ -f /usr/bin/mplayer ] && [ -f "$SMLINUX"/File_Select_64_slowed_down.mp3 ]; then
			killall -q -y1h mplayer
		fi
		return
	else
		echo
		echo Native Build Succesful.
	fi
	cd "$BASEPATH"/"$ANDROID"
	checkphone
	echo Android Package Kit build starting...
	killall -q zenity
	if [ "$GOTPHONE" = 1 ]; then
		echo Do not disconnect phone until complete.
		echo
		TOUCH_CONTROLS=$TOUCH_CONTROLS BETTERCAMERA=$BETTERCAMERA NODRAWINGDISTANCE=$NODRAWINGDISTANCE TEXTURE_FIX=$TEXTURE_FIX EXTERNAL_DATA=$EXTERNAL_DATA VERSION=$VERSION TEXTSAVES=$TEXTSAVES ./gradlew installDebug -q
	else
		echo WARNING: Phone not detected, building without installing.
		echo
		TOUCH_CONTROLS=$TOUCH_CONTROLS BETTERCAMERA=$BETTERCAMERA NODRAWINGDISTANCE=$NODRAWINGDISTANCE TEXTURE_FIX=$TEXTURE_FIX EXTERNAL_DATA=$EXTERNAL_DATA VERSION=$VERSION TEXTSAVES=$TEXTSAVES ./gradlew assembleDebug -q
	fi
	if [ "ARMONLY" = 1 ]; then
		rm app/build.gradle
		git checkout app/build.gradle
	fi
	cd "$BASEPATH"/"$PRESET"
	rm Android.mk
	git checkout Android.mk
	if [ "$EXTERNAL_DATA" = 1 ] && [ "$InstallHD" = 1 ]; then
		echo Preparing external data for transfer...
		cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
		if [ -f "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old/res/hdbase.zip ]; then
			cp "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old/res/hdbase.zip .
		elif [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old/res ]; then
			cp -ru "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old/res/* .
		fi
		unzip -n -q base
		zip -r -0 -u -q hdbase gfx sound
		ln -s "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/hdbase.zip "$BASEPATH"/"$ANDROID"/app/build/outputs/apk/debug/hdbase.zip
		rm -rf sound gfx
	elif [ "$EXTERNAL_DATA" = 1 ]; then
		ln -s "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/base.zip "$BASEPATH"/"$ANDROID"/app/build/outputs/apk/debug/base.zip
	fi
	checkphone
	if [ "$GOTPHONE" = 1 ] && [ "$EXTERNAL_DATA" = 1 ]; then
		echo
		echo Pushing external assets to phone...
		if [[ ! `adb shell ls /sdcard/Android/data/com.vdavid003.sm64port 2> /dev/null` ]]; then
			adb shell mkdir /sdcard/Android/data/com.vdavid003.sm64port
			adb shell mkdir /sdcard/Android/data/com.vdavid003.sm64port/files
		fi
		if [ -f "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/hdbase.zip ]; then
			adb push "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/hdbase.zip /sdcard/Android/data/com.vdavid003.sm64port/files/
		elif [ "$EXTERNAL_DATA" = 1] && [ -f "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/base.zip ]; then
			adb push "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/base.zip /sdcard/Android/data/com.vdavid003.sm64port/files/
		fi
	fi
elif [ "$TARGET" = "dos" ]; then
	ln -s "$BASEPATH"/djgpp/csdpmi/CWSDPMI.EXE "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/
elif [ "$PRESET" = "sm64nx" ] || ( [ "$TARGET_WEB" = 1 ] && [ "$InstallHD" = 1 ] ); then
	cd "$BASEPATH"/"$PRESET"
	rm Makefile
	git checkout Makefile
elif [ "$LEGACY_RES" = 0 ] && [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res ]; then
	cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
	echo Creating Basepack...
	zip -q -r -0 base gfx sound
	if [ -f base.zip ]; then
		rm -rf gfx sound
	fi
elif [ -f  "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/awesome-legacy.zip ]; then
		cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
		if [ -f base.zip ]; then
			rm base.zip
		fi
		mv awesome-legacy.zip base.zip
fi
if [ -f /usr/bin/mplayer ] && [ -f "$SMLINUX"/File_Select_64_slowed_down.mp3 ]; then
	killall -q -y1h mplayer
fi
}

theend(){
if [ "$TARGET" = "web" ]; then
	echo
	echo Python webserver will remain running until you kill python3.
	echo Unless you forward a port you cannot connect from outside your local network.
	echo WARNING: emsdk environment is loaded.  Do not try to
	echo use this shell to build.  Exit and open new shell. 
elif [ "$TARGET" = "dos" ]; then
	echo
	echo WARNING: djgpp environment is loaded.  Do not try to 
	echo use this shell to build.  Exit and open new shell. 
fi
echo
echo smlinux is complete. 
echo smlinux internal timestamp "$TIMESTAMP".
if [ -d "$BASEPATH"/"$PRESET"/.git ]; then
	echo "$GIT"-"$BRANCH" last commit:
	cd "$BASEPATH"/"$PRESET"
	git log -1 --format=%cd
fi
echo Please exit or close this terminal window!
echo
exit
}


endnow(){
echo "Script Ending Incomplete.  Contact #help-desk for support."
	if [ "$OSX_BUILD" = 0 ] && [ "$TARGET_RPI" = 0 ]; then
		"$OPEN" https://discord.gg/Ub6YHRm &
	fi
echo Your smlinux internal timestamp is "$TIMESTAMP".
echo If that is not recent, perhaps updates are not working.
echo check https://github.com/enigma9o7/smlinux for the latest version.
echo
exit
}

greenecho(){
# 0    black     COLOR_BLACK     0,0,0
# 1    red       COLOR_RED       1,0,0
# 2    green     COLOR_GREEN     0,1,0
# 3    yellow    COLOR_YELLOW    1,1,0
# 4    blue      COLOR_BLUE      0,0,1
# 5    magenta   COLOR_MAGENTA   1,0,1
# 6    cyan      COLOR_CYAN      0,1,1
# 7    white     COLOR_WHITE     1,1,1
tput setab 0  # black background
tput setaf 2  # greeen text
tput bold
echo "$@"
tput sgr0 # reset
tput setab 0  # black background
tput setaf 7 # white text
}

androidsdk(){
if command -v sudo &> /dev/null && command -v apt &> /dev/null && [ ! -d /usr/lib/android-sdk ]; then
	sudo apt install android-sdk -y
fi
if [ ! -f "$BASEPATH"/android-sdk/tools/bin/sdkmanager ]; then
	cd "$BASEPATH"
	wget -q https://dl.google.com/android/repository/commandlinetools-linux-6609375_latest.zip
	unzip -o commandlinetools-linux-6609375_latest -d android-sdk
	rm commandlinetools-linux-6609375_latest.zip
fi
PATH="$BASEPATH"/android-sdk/tools/bin:$PATH
export PATH="$BASEPATH"/android-sdk/tools/bin:$PATH
export ANDROID_HOME="$BASEPATH"/android-sdk
if [ ! -d "$BASEPATH"/android-sdk/licenses ]; then
	yes | sdkmanager --sdk_root=${ANDROID_HOME} --licenses
fi
if [ ! -d "$BASEPATH"/android-sdk/ndk-bundle ]; then
	sdkmanager --install --sdk_root=${ANDROID_HOME} ndk-bundle
fi
}

checkphone(){
adb get-state 1>/dev/null 2>&1 && GOTPHONE=1
}

gcccheck(){
if [ -f /usr/bin/gcc ] || [ -f /bin/gcc ]; then
	if [ `gcc -dumpfullversion -dumpversion` \> 7.99 ]; then
		echo gcc 8 or higher confirmed
		return
	elif [ `gcc-9 -dumpfullversion -dumpversion` \> 7.99 ]; then
		if [ "$OSX_BUILD" = 0 ]; then
			echo WARNING: Shouldnt be here should be mac only.
		fi
		echo gcc-9 confirmed
		return
	fi
fi 
if command -v sudo &> /dev/null && command -v apt &> /dev/null; then		
	echo Attempting to install gcc 9.
	echo | sudo add-apt-repository ppa:ubuntu-toolchain-r/test
	sudo apt install -y g++-9
	sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 80 --slave /usr/bin/g++ g++ /usr/bin/g++-9 --slave /usr/bin/gcov gcov /usr/bin/gcov-9
	if [ `gcc -dumpversion` \> 8.99 ]; then
		echo gcc 9 succesfully installed
		return
	else
		echo Attempting to install gcc 8.
		sudo apt install -y g++-8
		sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 80 --slave /usr/bin/g++ g++ /usr/bin/g++-8 --slave /usr/bin/gcov gcov /usr/bin/gcov-8
		if [ `gcc -dumpversion` \> 7.99 ]; then
			echo gcc 8 succesfully installed
			return
		fi
	fi			
fi
echo "ERROR: smlinux doesn't think your C compiler is not new enough for sm64nx."
echo "gcc -dumpfullversion must report 8 or higher."
echo "Please install it then rerun smlinux, or use another repo."
echo "Sometimes its wrong - if you have gcc 8/9/10 and wish to continue, do so."
echo
exec 2> >(grep -v GtkDialog >&2) # Supress GTK Dialog Warnings
if zenity --question --text="sm64nx requires gcc 8 or newer and was not detected.\nDo you wish to continue anyway incase smlinux is reading gcc -dumpversion wrong,\nor abort so you can install it then run smlinux again?" --title "GCC 8 or newer not detected" --ok-label="Abort" --cancel-label="Continue" --width 550; then
	exit
fi
}

domymenu(){	
if [ ! -f "$BASEPATH"/"$PRESET"/enhancements/menu-arrows.patch ]; then
	if [ "$PRESET" = "androidex" ] || [ "$GIT" = "sm64pc/sm64ex" ] || [ "$PRESET" = "render96ex" ] || [ "$GIT" = "djoslin0/sm64ex-coop" ]; then
		echo Applying menu arrows...
		cd "$BASEPATH"/"$PRESET"
		cp "$SMLINUX"/menu-arrows.patch enhancements
		git apply enhancements/menu-arrows.patch
	fi
fi
}

vettrom(){
local romfile="$SMLINUX"/baserom."$VERSION"
if [ "$VERSION" = "us" ]; then
	hashcheck(){ 
	HASH=`sha1sum "$romfile".z64 | grep 9bef1128717f958171a4afac3ed78ee2bb4e86ce`
	}
elif [ "$VERSION" = "jp" ]; then
	hashcheck(){ 
	HASH=`sha1sum "$romfile".z64 | grep 8a20a5c83d6ceb0f0506cfc9fa20d8f438cafe51`
	}
elif [ "$VERSION" = "eu" ]; then
	hashcheck(){
	HASH=`sha1sum "$romfile".z64 | grep 4ac5721683d0e0b6bbb561b58a71740845dceea9`
	}
elif ["$VERSION" = "sh" ]; then
	hashcheck(){
	HASH=`sha1sum "$romfile".z64 | grep 3f319ae697533a255a1003d09202379d78d5a2e0`
	}
fi
hashcheck
if [ "$HASH" = "" ]; then
	echo ROM failed initial hash check - attempting format conversion...
	cd "$SMLINUX"
	if [ ! -f "$SMLINUX"/n64swap.py ]; then
		echo Getting conversion tools...
		wget https://github.com/Brawl345/N64Swap/raw/master/n64swap.py
		pip3 install numpy
	fi
	# Try V64
	mv "$romfile".z64 "$romfile".v64
	python3 n64swap.py "$romfile".v64 "$romfile".z64
	if [ -f "$romfile".z64 ]; then
		hashcheck
		if [ ! "$HASH" = "" ]; then
			echo Conversion from V64 succesful.
		else
			if [ -f "$romfile".z64 ]; then
				rm "$romfile".z64
			fi
			# Try N64
			mv "$romfile".v64 "$romfile".n64
			python3 n64swap.py "$romfile".v64 "$romfile".z64
			if [ -f "$romfile".z64 ]; then
				hashcheck
				if [ ! "$HASH" = "" ]; then
					echo Conversion from N64 succesful.
				elif [ -f "$romfile".* ]; then
					rm "$romfile".*
					echo Conversion still did not produce correct sha1sum.
				else
					echo Conversion still did not produce correct sha1sum.
				fi
			fi
		fi
	fi
fi
}

makeconfig(){
if [ ! -d "$SMLINUX" ]; then
	mkdir "$SMLINUX"
fi
echo '# PRESET supports: sm64ex sm64nx sm64ex-coop render96ex cheaterex 
# AND: sm64dos sm64-portweb sm64exweb sm64-port-android-base androidex 
# AND: sm64pc sm64-port r96proto coop-unstable
PRESET=sm64ex
InstallHD=1
InstallR96=0
FPS60=0
# VERSION supports us jp eu (must correspond to rom version)
VERSION=us
# Set MAXJOBS=n to limit cpu threads used during compile, i.e. MAXJOBS=1
MAXJOBS=
# [ options for sm64ex and its forks ] 
CHEATER=1
BETTERCAMERA=1
NODRAWINGDISTANCE=1
TEXTURE_FIX=1
EXTERNAL_DATA=1
DISCORDRPC=1
# RENDER_API supports GL (2.1+) or GL_LEGACY (1.1+)
RENDER_API=GL
# WINDOW_API supports SDL2 or SDL1 (1.2)
WINDOW_API=SDL2
TEXTSAVES=0
# [ options for sm64ex-coop only ]
DISCORD_SDK=1
IMMEDIATELOAD=1
# [ options for render96ex only ]
LEGACY_RES=1
# [ options for Android only ]
TOUCH_CONTROLS=1
ARMONLY=1
# [ options for DOS only ]
ENABLE_OPENGL_LEGACY=1
# DOS_GL Supports dmesa (glide) or osmesa
DOS_GL=osmesa
ENABLE_OPENGL_LEGACY=1
# [ Advanced Settings ]
# Set CONFIG=0 If you do not want to be automatically prompted before building.
CONFIG=1
# BASEPATH must exist and is where folders for each repo will be placed
BASEPATH=$HOME
# Set UpdateHD=0 to prevent smlinux updating addons when rebuilding
UpdateHD=1
# set DEBUG=1 if you want to make a debug build for some odd reason
DEBUG=0
TARGET_WEB=0
TARGET_RPI=0
OSX_BUILD=0
# [ GIT and BRANCH are ignored if PRESET is known ]
GIT=sm64pc/sm64ex
BRANCH=nightly
# [ Linux must be set to command appropriate to your distribution. See FAQ. ]
# Linux command is only called during first install and is not used for macOS
Linux="sudo apt install -y build-essential bsdmainutils binutils wget git python3 libaudiofile-dev libglew-dev libsdl2-dev libusb-1.0-0-dev libzstd-dev python3-pip zenity mplayer unzip unrar"
# Set AutoUpdate=0 to prevent smlinux updating itself
AutoUpdate=1' > "$SMLINUX"/smlinuxcfg.txt
}

loadconfig(){
WINDOW_API=SDL2
OSX_BUILD=0
TARGET_RPI=0
TEXTSAVES=0
TOUCH_CONTROLS=1
LEGACY_RES=1
BASEPATH=$HOME
ARMONLY=1
DEBUG=0
IMMEDIATELOAD=1
DOS_GL=osmesa
ENABLE_OPENGL_LEGACY=1
ANDROID=0
InstallR96=0
DISCORD_SDK=1
FPS60=0
CHEATER=1
source "$SMLINUX"/smlinuxcfg.txt
if [ -z $PRESET ] && [ ! -z $REPO ]; then
	PRESET="$REPO"
elif [ -z $PRESET ]; then
	PRESET=sm64-"$BRANCH"
fi
if [ "$PRESET" = "sm64pc" ]; then
	GIT=sm64ex/sm64pc
	BRANCH=master
	CHEATER=0
elif [ "$PRESET" = "sm64-port" ]; then
	GIT=sm64-port/sm64-port
	BRANCH=master
	EXTERNAL_DATA=0
	CHEATER=0
elif [ "$PRESET" = "sm64ex" ]; then
	GIT=sm64pc/sm64ex
	BRANCH=nightly
elif [ "$PRESET" = "sm64exweb" ]; then
	GIT=sm64pc/sm64ex
	BRANCH=nightly
	TARGET_WEB=1
	TARGET_RPI=0
	EXTERNAL_DATA=0
	DISCORDRPC=0
	FPS60=0
elif [ "$PRESET" = "sm64-portweb" ]; then
	GIT=sm64-port/sm64-port
	BRANCH=master
	TARGET_WEB=1
	TARGET_RPI=0
	EXTERNAL_DATA=0
	DISCORDRPC=0
	FPS60=0
	CHEATER=0
elif [ "$PRESET" = "sm64nx" ]; then
	GIT=teamsalta/sm64nx
	BRANCH=master
	EXTERNAL_DATA=0
	FPS60=0
	CHEATER=0
elif [ "$PRESET" = "render96ex" ] || [ $(echo "$PRESET" | tr '[:upper:]' '[:lower:]') = "render96ex" ] || [ $(echo "$PRESET" | tr '[:upper:]' '[:lower:]') = "render96" ] || [ "$PRESET" = "r96ex" ]; then
	PRESET=render96ex
	GIT=render96/render96ex
	BRANCH=master
	EXTERNAL_DATA=1
	TEXTSAVES=1
	InstallR96=1
elif [ "$PRESET" = "r96proto" ]; then
	GIT=render96/render96ex
	BRANCH=fastbuild_prototype
	EXTERNAL_DATA=1
	TEXTSAVES=1
	DISCORDRPC=0
	LEGACY_RES=0
	CHEATER=0
elif [ "$PRESET" = "cheaterex" ] || [ $(echo "$PRESET" | tr '[:upper:]' '[:lower:]') = "cheaterex" ]; then
	PRESET=cheaterex
	GIT=s4Ys369/cheaterex
	BRANCH=nightly
	FPS60=0
	CHEATER=0
elif [ "$PRESET" = "emm-ody" ]; then
	GIT=s4Ys369/cheaterex
	BRANCH=emm-ody
	FPS60=0
	CHEATER=0
elif  [ "$PRESET" = "coop-unstable" ]; then
	GIT=djoslin0/sm64ex-coop
	BRANCH=unstable
	NODRAWINGDISTANCE=1
	FPS60=0
	CHEATER=0
elif  [ "$PRESET" = "sm64ex-coop" ]; then
	GIT=djoslin0/sm64ex-coop
	BRANCH=coop
	NODRAWINGDISTANCE=1
	FPS60=0
elif [ "$PRESET" = "androidex" ] ; then
	ANDROID="$PRESET"
	PRESET="androidex/app/jni/src"
	GIT=vdavid003/sm64-port-android-base
	BRANCH=sm64ex_nightly
	TARGET_WEB=0
	TARGET_RPI=0
elif  [ "$PRESET" = "sm64-port-android-base" ]; then
	ANDROID="$PRESET"
	PRESET="sm64-port-android-base/app/jni/src"
	GIT=vdavid003/sm64-port-android-base
	BRANCH=master
	EXTERNAL_DATA=0
	TARGET_WEB=0
	TARGET_RPI=0
	CHEATER=0	
elif  [ "$PRESET" = "mkstdos" ]; then
	GIT=mkst/sm64-port
	BRANCH=dos
	EXTERNAL_DATA=0
	TARGET_WEB=0
	TARGET_RPI=0
	TARGET=dos		
	InstallHD=0
	CHEATER=0
elif  [ "$PRESET" = "sm64dos" ]; then
	GIT=fgsfdsfgs/sm64-port
	BRANCH=dos
	EXTERNAL_DATA=0
	TARGET_WEB=0
	TARGET_RPI=0
	TARGET=dos	
	CHEATER=0	
fi
if [ `uname` = "Darwin" ]; then
	OSX_BUILD=1
fi
if [ ! `uname -m` = "x86_64" ] || [ "$VERSION" = "jp" ]; then
	DISCORDRPC=0
	DISCORD_SDK=0
fi
if [ "$TARGET_WEB" = 1 ]; then 
	TARGET=web
elif [ ! "$TARGET" = "dos" ]; then
	TARGET=pc
fi
if [ -z "$MAXJOBS" ]; then
	if [ "$PRESET" = "sm64nx" ] || [ "$OSX_BUILD" = 1 ]; then 
		MAXJOBS=$((`nproc` - 1))		
	else 
		MAXJOBS=`nproc`
	fi
fi
if [ "$2" = "--hd" ] || [ "$3" = "--hd" ] ||[ "$4" = "--hd" ] ||[ "$5" = "--hd" ]; then
	UpdateHD=1
	InstallHD=1
fi
if [ "$2" = "--sgi" ] || [ "$3" = "--sgi" ] ||[ "$4" = "--sgi" ] ||[ "$5" = "--sgi" ]; then
	EXTERNAL_DATA=1
	InstallR96=1
elif [ "$2" = "--SGI" ] || [ "$3" = "--SGI" ] ||[ "$4" = "--SGI" ] ||[ "$5" = "--SGI" ]; then
	EXTERNAL_DATA=1
	InstallR96=1
fi
if [ "$2" = "--config" ] || [ "$3" = "--config" ] ||[ "$4" = "--config" ] ||[ "$5" = "--config" ]; then
	CONFIG=1
elif [ "$2" = "config" ] || [ "$3" = "config" ] ||[ "$4" = "config" ] ||[ "$5" = "config" ]; then
	CONFIG=1
fi
if [ "$2" = "--depends" ] || [ "$3" = "--depends" ] ||[ "$4" = "--depends" ] ||[ "$5" = "--depends" ]; then
	DEPENDS=1
fi
}

doconfig(){
if ! command -v whiptail &> /dev/null; then
    return
elif (whiptail --title "Build Options" --yesno "$(cat "$SMLINUX"/smlinuxcfg.txt)" 24 80 --yes-button "Edit Options" --no-button "Proceed" --defaultno); then
	whiptail --title "smlinux paused until you exit editor" --msgbox "Your configuration file will open in a text editor.\n\nWhen you exit your editor, smlinux will continue.\n(To exit pico/nano/micro editors use Control-X)\n\nFor first build, default options which include community enhancements are reccommended.\n\nIf you mess up your settings,\nrun smlinux reset to restore to latest defaults." 16 60 2>&1
	editconfig	
fi
}

editconfig(){
if [ ! -f "$SMLINUX"/ui.py ]; then
	echo Getting conversion tools...
	wget -O- https://github.com/enigma9o7/smlinux/raw/master/sml.ui > "$SMLINUX"/sml.ui
        wget -O- https://github.com/enigma9o7/smlinux/raw/master/ui.py > "$SMLINUX"/ui.py
	pip3 install pyqt5
fi
printf "$SMLINUX\n$SMLINUX/smlinuxcfg.txt\n"|python3 "$SMLINUX"/ui.py > "$SMLINUX"/smlinuxcfg.txt.swp
cat "$SMLINUX"/smlinuxcfg.txt.swp > "$SMLINUX"/smlinuxcfg.txt
rm "$SMLINUX"/smlinuxcfg.txt.swp
}

loademsdk(){
if [ ! -d "$BASEPATH"/emsdk ]; then
	cd "$BASEPATH"
	git clone git://github.com/emscripten-core/emsdk
	cd emsdk
	./emsdk install 1.39.5
	./emsdk activate 1.39.5
fi
source "$BASEPATH"/emsdk/emsdk_env.sh
}


dodos(){
cd "$BASEPATH"
if [ ! -d "$BASEPATH"/djgpp/bin ]; then
	wget https://github.com/andrewwutw/build-djgpp/releases/download/v3.0/djgpp-linux64-gcc930.tar.bz2
	tar xjf djgpp-linux64-gcc930.tar.bz2
	rm djgpp-linux64-gcc930.tar.bz2
fi
if [ ! -d "$BASEPATH"/djgpp/csdpmi ]; then
	mkdir djgpp/csdpmi
	wget https://sandmann.dotster.com/cwsdpmi/csdpmi7b.zip
	unzip -j -d djgpp/csdpmi csdpmi7b.zip bin/CWSDPMI.EXE
	rm csdpmi7b.zip
fi
export PATH="$BASEPATH"/djgpp/bin:$PATH
}

prepnx(){
mkdir "$BASEPATH"/"$PRESET"/build
mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"
mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs
ln -s "$SAVEDIR"/sm64.sav "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64.sav 
ln -s "$SAVEDIR"/sm64.log "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64.log 
ln -s "$SAVEDIR"/conf.bin "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/conf.bin
ln -s "$SAVEDIR"/gamepad1.bindings.json "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/gamepad1.bindings.json
ln -s "$SAVEDIR"/keyboard1.bindings.json "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/keyboard1.bindings.json
ln -s "$SMLINUX"/baserom."$VERSION".z64 "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/baserom."$VERSION".z64
cd "$BASEPATH"/"$PRESET"/tools
make -j"$MAXJOBS"
cd "$BASEPATH"/"$PRESET"/import
python3 extract_assets.py
python3 ../scripts/pak.py --source . --output "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/'!!base.pak'
if [ ! -f "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/'!!base.pak' ]; then
	echo 
	echo ERROR: Unable to extract and pak ROM.
	endnow
else
	echo could now get hash for ...ummmm.... forgot... got hash so dont care anymore... 
	echo "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/'!!base.pak' created.
fi
}

dohd(){ 
if [ "$PRESET" = "sm64nx" ]; then 
	echo "Getting add-on pakfiles (Select with in-game mods menu then restart game)"
	if [ ! -d "$BASEPATH"/"$PRESET"/build ] ; then mkdir "$BASEPATH"/"$PRESET"/build
	fi
	if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" ] ; then mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"
	fi
	if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs ] ; then mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs
	fi
	if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"Cleaner Aesthetics" ]; then
		echo Getting Cleaner Aesthetics Textures...
		mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"Cleaner Aesthetics"
		cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"Cleaner Aesthetics"
		wget -q https://cdn.discordapp.com/attachments/730416836780490752/730430152957362191/cleaner.pak
	fi
	if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"HD Mario . Bowser" ]; then
		echo "Getting HD Mario & Bowser..."
		mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"HD Mario . Bowser"
		cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"HD Mario . Bowser"
		wget -q https://cdn.discordapp.com/attachments/730416836780490752/730425308989227158/arredondo.pak
	fi
	if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"~OWO Mod" ]; then
		echo Getting oWo...
		mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"~OWO Mod"
		cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"~OWO Mod"
		wget -q https://cdn.discordapp.com/attachments/730416836780490752/730420038024036362/owo.pak
	fi
	if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"~HD Luigi" ]; then
		echo Getting HD Luigi...
		mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"~HD Luigi"
		cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"~HD Luigi"
		wget -q https://cdn.discordapp.com/attachments/730416836780490752/730425786452017222/luigi.pak
	fi
	if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"~NES Retro" ]; then
		echo Getting NES Retro Theme...
		mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"~NES Retro"
		cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"~NES Retro"
		wget -q https://cdn.discordapp.com/attachments/730416836780490752/730431589749620736/nes.pak
	fi
	if [ "$InstallR96" = 1 ] && [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"Render 96" ]; then
		dosgi
	fi
else
	if [ "$EXTERNAL_DATA" = 1 ] ; then
		if [ ! -d "$BASEPATH"/"$PRESET"/build ] ; then 
			mkdir "$BASEPATH"/"$PRESET"/build
		fi
		if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" ] ; then 
			mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"
		fi
		if [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/.git ] ; then
			echo Updating textures from github...
			cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			git pull --no-rebase
		elif [ -d "$BASEPATH"/"$PRESET".old/build/"$VERSION"_"$TARGET"/res/.git ] ; then
			echo Getting texture repository from old build...
			if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res ]; then
				mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			fi
			cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			mv "$BASEPATH"/"$PRESET".old/build/"$VERSION"_"$TARGET"/res/.git .
			if [ -f "$BASEPATH"/"$PRESET".old/build/"$VERSION"_"$TARGET"/res/hq_sounds_v5.1.zip ]; then
				echo Copying high quality sounds......
				cp "$BASEPATH"/"$PRESET".old/build/"$VERSION"_"$TARGET"/res/hq_sounds_v5.1.zip .
			fi
			echo Updating textures from github...
			git checkout gfx
			git pull --no-rebase
		elif [ "$PRESET" = "r96proto" ] && [ -d "$BASEPATH"/render96ex/build/"$VERSION"_"$TARGET"/res/.git ]; then
			echo Copying textures from render96ex
			if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res ]; then
				mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			fi
			mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/.git
			cp -r "$BASEPATH"/render96ex/build/"$VERSION"_"$TARGET"/res/.git/* "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/.git
			if [ -f "$BASEPATH"/render96ex/build/"$VERSION"_"$TARGET"/res/hq_sounds_v5.1.zip ]; then
				echo Copying high quality sounds......
				cp -r "$BASEPATH"/render96ex/build/"$VERSION"_"$TARGET"/res/hq_sounds_v5.1.zip "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			fi
			echo Updating textures from github...
			cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			git checkout gfx
			git pull --no-rebase
		elif [ "$PRESET" = "render96ex" ] && [ -d "$BASEPATH"/r96proto/build/"$VERSION"_"$TARGET"/res/.git ]; then
			echo Copying textures from r96proto
			if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res ]; then
				mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			fi
			mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/.git
			cp -r "$BASEPATH"/r96proto/build/"$VERSION"_"$TARGET"/res/.git/* "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/.git
			if [ -f "$BASEPATH"/r96proto/build/"$VERSION"_"$TARGET"/res/hq_sounds_v5.1.zip ]; then
				echo Copying high quality sounds......
				cp -r "$BASEPATH"/r96proto/build/"$VERSION"_"$TARGET"/res/hq_sounds_v5.1.zip "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			fi
			echo Updating render96 textures from github...
			cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			git checkout gfx
			git pull --no-rebase
		elif [ ! "PRESET" = "render96ex" ] && [ ! "PRESET" = "r96proto" ] && [ -d "$BASEPATH"/sm64ex/build/"$VERSION"_"$TARGET"/res/.git ]; then
			echo Copying textures from sm64ex
			if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res ]; then
				mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			fi
			mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/.git
			cp -r "$BASEPATH"/sm64ex/build/"$VERSION"_"$TARGET"/res/.git/* "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/.git
			if [ -f "$BASEPATH"/sm64ex/build/"$VERSION"_"$TARGET"/res/hq_sounds_v5.1.zip ]; then
				echo Copying high quality sounds......
				cp -r "$BASEPATH"/sm64ex/build/"$VERSION"_"$TARGET"/res/hq_sounds_v5.1.zip "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			fi
			echo Updating textures from github...
			cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			git checkout gfx
			git pull --no-rebase
		elif [ ! "PRESET" = "render96ex" ] && [ ! "PRESET" = "r96proto" ] && [ -d "$BASEPATH"/sm64ex-coop/build/"$VERSION"_"$TARGET"/res/.git ]; then
			echo Copying textures from sm64ex-coop
			if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res ]; then
				mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			fi
			mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/.git
			cp -r "$BASEPATH"/sm64ex-coop/build/"$VERSION"_"$TARGET"/res/.git/* "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/.git
			if [ -f "$BASEPATH"/sm64ex-coop/build/"$VERSION"_"$TARGET"/res/hq_sounds_v5.1.zip ]; then
				echo Copying high quality sounds......
				cp -r "$BASEPATH"/sm64ex-coop/build/"$VERSION"_"$TARGET"/res/hq_sounds_v5.1.zip "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			fi
			echo Updating textures from github...
			cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			git checkout gfx
			git pull --no-rebase
		elif [  -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res ] ; then
			mv "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res.old
		fi
		if [  ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res ] ; then
			if [ "$PRESET" = "render96ex" ] || [ "$PRESET" = "r96proto" ]; then
				echo Downloading Render96 Textures... 
				git clone --single-branch git://://github.com/pokeheadroom/RENDER96-HD-TEXTURE-PACK "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			else
				echo Downloading Cleaner Aesthetics Textures...
				git clone --single-branch git://github.com/CrashCrod/Cleaner-Aesthetics "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			fi
		fi
		if [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res.old ]; then
			mv -n "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res.old/* "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
		fi
		if [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/gfx/textures/skyboxes ]; then
			rm -rf "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/gfx/textures/skyboxes
		fi
		if [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/screenshots ]; then
			rm -rf "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/screenshots
		fi
		if [ ! -f "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/hq_sounds_v5.1.zip ]; then
			cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res	
			echo Getting High Quality Sounds...
			wget -q https://github.com/MapAnon/sm64-pc-hq-sounds/releases/download/5.1/hq_sounds_v5.1.zip
		fi
	elif [ "$GIT" = "sm64pc/sm64ex" ] || [ "$PRESET" = "render96ex" ] ||[ "$GIT" = "s4Ys369/cheaterex" ] ||[ "$GIT" = "djoslin0/sm64ex-coop" ] || [ "$PRESET" = "androidex" ]; then
		echo WARNING: EXTERNAL_DATA=0 so skipping add-on textures and Sound
	elif [ "$GIT" = "sm64-port/sm64-port" ]; then
		echo External Data not supported for sm64-port repository, skipping.
	fi
	if  [ -f "$BASEPATH"/"$PRESET"/enhancements/Old_School_HD_SGI_Base_Models_V1.3_Refresh_11* ] || [ -f "$BASEPATH"/"$PRESET"/enhancements/RENDER96_V1* ] ; then
		echo "Render96 model pack found, skipping model application."
	elif  [ "$InstallR96" = 1 ] && [ "$EXTERNAL_DATA" = 1 ]; then
		dosgi
	elif [ ! "$TARGET" = "dos" ] &&  [ ! "$GIT" = "render96/render96ex" ] ; then
		cd "$BASEPATH"/"$PRESET" 
		if [ ! -d actors.bak ]; then
			cp -r actors actors.bak
		fi
		if [ ! -f "$BASEPATH"/"$PRESET"/enhancements/Old_School_HD_Mario_Model.zip ] && [ ! "$GIT" = "djoslin0/sm64ex-coop" ];  then
			wget -q https://cdn.discordapp.com/attachments/716459185230970880/719758031990030427/Old_School_HD_Mario_Model.zip -P enhancements
			echo Applying HD Mario...
			unzip -o -q enhancements/Old_School_HD_Mario_Model
		fi
		if [ ! -f "$BASEPATH"/"$PRESET"/enhancements/hd_bowser.rar ];  then
			wget -q https://cdn.discordapp.com/attachments/716459185230970880/718990046442684456/hd_bowser.rar -P enhancements
			echo Applying HD Bowser...
			unrar x -o+ -idq enhancements/hd_bowser
		fi
		if [ ! -f "$BASEPATH"/"$PRESET"/enhancements/3d_coin_v2*.patch ] && [ "$ANDROID" = 0 ] && [ ! "$GIT" = "djoslin0/sm64ex-coop" ]; then
			if [ "$PRESET" = "sm64pc" ]; then
				wget -q https://cdn.discordapp.com/attachments/716459185230970880/718674249631662120/3d_coin_v2.patch -P enhancements
			else
				wget -q https://cdn.discordapp.com/attachments/721806706547490868/725041183700680807/3d_coin_v2_nightly.patch -P enhancements
			fi
			if [ -f "$BASEPATH"/"$PRESET"/enhancements/3d_coin_v2*.patch ]; then
				echo Applying 3D Coin Patch...
				git apply enhancements/3d_coin_v2*.patch
			fi
		fi
	fi
fi
}

dofps(){
cd "$BASEPATH"/"$PRESET"
if [ "$FPS60" = 1 ] && [ ! -f enhancements/60fps ]; then
	echo Applying 60fps patch...
	git apply enhancements/60fps*.patch
	touch enhancements/60fps
	if [ -f "$SAVEDIR"/sm64config.txt ] && [ -f "$BASEPATH"/"$PRESET"/enhancements/60fps ]; then
		echo Enabling Vsync...
		sed -i.bak 's/vsync false/vsync true/g' "$SAVEDIR"/sm64config.txt
	fi
elif [ "$FPS60" = 0 ] && [ -f enhancements/60fps ]; then
	echo Removing 60fps patch...
	git apply -R enhancements/60fps*.patch
	rm enhancements/60fps
	if [ -f "$SAVEDIR"/sm64config.txt ] && [ -f "$BASEPATH"/"$PRESET"/enhancements/60fps ]; then
		echo Enabling Vsync...
		sed -i.bak 's/vsync true/vsync valse/g' "$SAVEDIR"/sm64config.txt
	fi
fi
}

dosgi(){
if  [ "$TARGET_WEB" = 1 ] || ([ "$EXTERNAL_DATA" = 0 ] && [ ! "$PRESET" = "sm64nx" ]); then
	if(whiptail --title "SGI Model Warning" --yesno "SGI Models are unlikely to work without external data or for web Target." 10 50 --yes-button "Continue Anyway" --no-button "Cancel" --defaultno); then
		echo WARNING: SGI Models may not build correctly on anything besides sm64ex-nightly
		echo Proceeding anyway, but it may not be succesful.
	else
		return
	fi
fi
if  [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"Render 96" ] || [ -f "$BASEPATH"/"$PRESET"/enhancements/RENDER96_V1* ] || [ -f "$BASEPATH"/"$PRESET"/enhancements/Old_School_HD_SGI_Base_Models_V1.3_Refresh_11* ] || [ -f "$BASEPATH"/"$PRESET"/enhancements/render96* ]; then 
	echo Render96 already installed.
	return
fi
if [ -f "$BASEPATH"/"$PRESET"/enhancements/3d_coin*.patch ]; then
	echo Removing 3D coins...
	cd "$BASEPATH"/"$PRESET"
	git apply -R enhancements/3d_coin*.patch
	rm enhancements/3d_coin*.patch
fi
if [ "$PRESET" = "sm64nx" ]; then
	echo Getting Render96 Texture Pak...
	mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"Render96 Textures"
	cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"Render96 Textures"
	wget https://sm64pc.info/downloads/texture_pack/render96_hd.pak
	cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/
	if [ -d "Cleaner Aesthetics" ]; then
		mv "Cleaner Aesthetics" "~Cleaner Aesthetics"
	fi
	if [ -d "HD Mario . Bowser" ]; then
		mv "HD Mario . Bowser" "~HD Mario . Bowser"
	fi
	if [ -d "~SGI Models" ]; then
		mv "~SGI Models" "SGI Models"
	fi
	if [ ! -d "SGI Models" ]; then
		echo Getting Render96 SGI Models...
		mkdir "SGI Models"
		cd "SGI Models"
		wget -q https://sm64pc.info/downloads/sgi13_fixed.pak
	fi
elif [ "$GIT" = "render96/render96ex" ]; then
	cd "$BASEPATH"/"$PRESET"/enhancements
	wget -q https://cdn.discordapp.com/attachments/730551213376143431/745382037560492132/RENDER96_V1.4.2_Luigi_Fixed_Sound.zip
	SGIFILE=RENDER96_V1.4.2_Luigi_Fixed_Sound.zip
elif [ "$GIT" = "djoslin0/sm64ex-coop" ]; then
	cd "$BASEPATH"/"$PRESET"/enhancements
	wget -q https://sm64pc.info/downloads/model_pack/render96_coop.zip
	SGIFILE=render96_coop.zip
else
	cd "$BASEPATH"/"$PRESET"/enhancements
	wget -q https://cdn.discordapp.com/attachments/727722992137666573/745038574918828112/RENDER96_V1.3.7z
	mv RENDER96_V1.3.7z RENDER96_V1.3.zip
	SGIFILE=RENDER96_V1.3.zip
fi
removecheater
if [ -d "$BASEPATH"/"$PRESET"/actors.bak ] && [ ! "$SGIFILE" = "render96_coop.zip" ]; then
	echo Restoring default actors...
	cd "$BASEPATH"/"$PRESET"/enhancements
	rm -rf "$BASEPATH"/"$PRESET"/actors
	mv "$BASEPATH"/"$PRESET"/actors.bak "$BASEPATH"/"$PRESET"/actors
	rm hd_bowser.rar Old_School_HD_Mario_Model.zip
elif [ -d "$BASEPATH"/"$PRESET"/actors.bak ] && [ "$SGIFILE" = "render96_coop.zip" ]; then
	echo Restoring default actors and keeping backup...
	cd "$BASEPATH"/"$PRESET"/enhancements
	rm -rf "$BASEPATH"/"$PRESET"/actors
	cp -r "$BASEPATH"/"$PRESET"/actors.bak "$BASEPATH"/"$PRESET"/actors
	rm hd_bowser.rar
elif [ "$SGIFILE" = "render96_coop.zip" ]; then
	echo Saving original actors folder as actors.bak 	
	cd "$BASEPATH"/"$PRESET"
	cp -ru actors actors.bak
fi
if [ ! "$PRESET" = "sm64nx" ]; then
	cd "$BASEPATH"/"$PRESET"
	echo Applying Render96 SGI Models...
	unzip -o enhancements/"$SGIFILE" 
fi
if [ ! "$ANDROID" = 0 ] && [ -f "$BASEPATH"/"$PRESET"/enhancements/render96_android.patch ]; then
	echo Applying Android patch for Render96 models
	git apply enhancements/render96_android.patch
fi
}
	
scriptUpdate(){
if [ ! -f ~/.smlinuxUpdate ]; then 
	if [ ! -f "$PATHDIR"/smlinux ] || [ ! -d "$SMLINUX"/.git ] ; then
		echo Installing smlinux... 		
		if [ -d "$SMLINUX" ]; then
			if [ -d "$SMLINUX".baq ]; then
				rm -rf "$SMLINUX".baq
			fi
			mv -f "$SMLINUX" "$SMLINUX".baq
		fi
		git clone --single-branch git://github.com/enigma9o7/smlinux.git "$SMLINUX"
		if [ -d "$SMLINUX".baq ]; then
			cp -Ru "$SMLINUX".baq/* "$SMLINUX"/
			rm -rf "$SMLINUX".baq
		fi
		if [ ! -d "$SMLINUX"/.git ] ; then
			echo ERROR: Cannot connect to github. Run without AutoUpdate enabled.  
			echo smlinux exiting incomplete.
			exit
		fi
		touch ~/.smlinuxUpdate
		mv -f "$SMLINUX"/smlinux "$PATHDIR"/
		if [ ! -f "$PATHDIR"/smlinux ]; then
			echo WARNING: Could not write to first path directory.  Creating $HOME/bin.
			touch "$HOME"/.smlinuxNopath
			mkdir $HOME/bin
			export PATH=$HOME/bin:$PATH
			if [ "$OSX_BUILD" = 1 ]; then	
				PATHDIR=$HOME/bin
			else
				mapfile -t -d: <<<"$PATH"
				PATHDIR="${MAPFILE[0]}"
			fi
			mv -f "$SMLINUX"/smlinux "$PATHDIR"
			if [ ! -f "$PATHDIR"/smlinux ]; then
				echo ERROR - Could not add to path.  Run without AutoUpdate enabled.
				echo smlinux exiting incomplete.
				exit
			fi
		else
			echo smlinux succefully added to path.
		fi
		chmod +x "$PATHDIR"/smlinux
		cd "$LAUNCH_DIR"
		exec smlinux "$COMMAND" "$OP1" "$OP2" "$OP3" "$OP4"
	else
		cd "$SMLINUX"
		git fetch
		if [ "$(git diff HEAD origin/HEAD -- smlinux)" != "" ]; then
			git merge
			if [ ! -f "$SMLINUX"/smlinux ]; then
				echo "ERROR: Script Update Unsuccesful."
				echo "Try #help-desk if script udpates continue to fail"
			else
				echo 'if [ `uname` = "Darwin" ]; then	
					PATHDIR=/usr/local/bin
				else
					mapfile -t -d: <<<"$PATH"
					PATHDIR="${MAPFILE[0]}"
				fi
				SHARE=${XDG_DATA_HOME:-$HOME/.local/share}
				SMLINUX="$SHARE"/sm64pc
				mv -f "$SMLINUX"/smlinux "$PATHDIR"/
				if [ ! -f "$PATHDIR"/smlinux ]; then
					echo WARNING: Could not write to first path directory.  Creating $HOME/bin.
					touch "$HOME"/.smlinuxNopath
					mkdir $HOME/bin
					export PATH=$HOME/bin:$PATH
					mapfile -t -d: <<<"$PATH"
					PATHDIR="${MAPFILE[0]}"
					mv -f "$SMLINUX"/smlinux "$PATHDIR"/
					if [ ! -f "$PATHDIR"/smlinux ]; then
						echo ERROR - Could not add to path.  Run without AutoUpdate enabled.
						exit
					fi
				fi
				chmod +x "$PATHDIR"/smlinux
				if [ -f "$HOME"/Downloads/smlinux ]; then mv -f "$HOME"/Downloads/smlinux "$HOME"/Downloads/smlinux.old.backup
				fi
				if [ -f "$HOME"/Downloads/smlinux.sh ]; then mv -f "$HOME"/Downloads/smlinux.sh "$HOME"/Downloads/smlinux.old.backup
				fi
				if [ -f "$HOME"/Downloads/smlinux.txt ]; then mv -f "$HOME"/Downloads/smlinux.txt "$HOME"/Downloads/smlinux.old.backup
				fi	
				exec smlinux "$@"' > ~/.smlinuxUpdate
				chmod +x ~/.smlinuxUpdate
				cd "$LAUNCH_DIR"
				exec ~/.smlinuxUpdate "$COMMAND" "$OP1" "$OP2" "$OP3" "$OP4"
			fi
		elif [ "$COMMAND" = "upgrade" ]; then    
			echo smlinux is up to date.
			exit
		else    
			echo smlinux is up to date.
		fi
	fi
fi
}

docheats(){
cd "$BASEPATH"/"$PRESET"
if [ "$GIT" = "s4Ys369/cheaterex" ]; then
	return
elif [ "$CHEATER" = 0 ]; then
	removecheater
elif ! ([ -f enhancements/CHEATERv9*.zip ] || [ -f enhancements/CHEATER.coop.v2*.zip ]); then
	removecheater
	echo Getting CHEATER...
	if [ "$ANDROID" = "androidex" ]; then
		cd "$BASEPATH"/"$PRESET"/enhancements
		wget -q https://cdn.discordapp.com/attachments/716459185230970880/762071729069359114/CHEATERv9.zip
		unzip -q CHEATERv9.zip v9_r96ex.patch
		CHEATERFILE=v9_r96ex.patch 
	elif [ "$GIT" = "djoslin0/sm64ex-coop" ]; then
		cd "$BASEPATH"/"$PRESET"/enhancements
		wget -q https://cdn.discordapp.com/attachments/755507981524795623/762583302074794024/CHEATER.coop.v2.patch.zip	
		unzip -q CHEATER.coop.v2.patch.zip 
		CHEATERFILE=CHEATER.coop.v2.patch
	elif [ "$GIT" = "sm64pc/sm64ex" ]  || [ "$GIT" = "render96/render96ex" ]; then
		cd "$BASEPATH"/"$PRESET"/enhancements
		wget -q https://cdn.discordapp.com/attachments/716459185230970880/764327857823678464/CHEATERv9.5.zip
		unzip -q CHEATERv9.5.zip CHEATER.patch 
		CHEATERFILE=CHEATER.patch
	fi
	if [ -f "$CHEATERFILE" ]; then
		echo Applying cheats...
		cd "$BASEPATH"/"$PRESET"
		git apply enhancements/"$CHEATERFILE" 
	fi
fi
}

removecheater(){
cd "$BASEPATH"/"$PRESET"
if [ -f enhancements/CHEATER*.patch ]; then
	echo Removing CHEATER...
	git apply -R enhancements/CHEATER*.patch
elif [ -f enhancements/cheater*.patch ]; then
	echo Removing CHEATER...
	git apply -R enhancements/cheater*.patch
	rm enhancements/cheater*.patch
elif [ -f enhancements/v9_*.patch ]; then
	echo Removing CHEATER...
	git apply -R enhancements/v9_*.patch
	rm enhancements/v9_*.patch
fi
if [ -f enhancements/CHEATER* ]; then
	rm enhancements/CHEATER*
fi
}

makedesktop(){
if [ ! -d "$SHARE"/icons ]; then 
	mkdir "$SHARE"/icons
fi
if [ ! -d "$SHARE"/applications ]; then 
	mkdir "$SHARE"/applications
fi
if [ ! -f "$SHARE"/icons/"$PRESET".* ]; then
	echo Getting Icon...
	if [ "$PRESET" = "sm64ex" ]; then
		wget -q https://cdn.discordapp.com/attachments/711253314855108629/712146686834638890/sm64.png
		mv sm64.png "$SHARE"/icons/"$PRESET".png
	elif [ "$PRESET" = "sm64nx" ]; then 
		wget -q https://cdn.discordapp.com/attachments/711253314855108629/719215654837682226/Super_Mario_64.png
		mv Super_Mario_64.png "$SHARE"/icons/"$PRESET".png
	elif [ "$PRESET" = "render96ex" ]; then
		mv "$SMLINUX"/r96-icon.png "$SHARE"/icons/"$PRESET".png
	elif [ "$PRESET" = "r96proto" ]; then
		mv "$SMLINUX"/r96proto-icon.png "$SHARE"/icons/"$PRESET".png
	elif [ "$PRESET" = "cheaterex" ]; then
		wget -q https://cdn.discordapp.com/attachments/710334795674288139/745150550382870548/bowser.png
		mv bowser.png "$SHARE"/icons/"$PRESET".png
	elif [ "$PRESET" = "emm-ody" ]; then
		mv "$SMLINUX"/sm64hat-icon.png "$SHARE"/icons/"$PRESET".png
	elif [ "$PRESET" = "sm64-port" ]; then 
		wget -q https://cdn.discordapp.com/attachments/710334795674288139/745156574334550096/staricon.png
		mv staricon.png "$SHARE"/icons/"$PRESET".png
	elif [ "$PRESET" = "sm64ex-coop" ]; then 
		wget -q https://cdn.discordapp.com/attachments/710334795674288139/741732375074963556/luigihudicon.png
		mv luigihudicon.png "$SHARE"/icons/"$PRESET".png
	elif [ "$PRESET" = "coop-unstable" ]; then 
		wget -q https://cdn.discordapp.com/attachments/710334795674288139/741732375074963556/luigihudicon.png
		mv luigihudicon.png "$SHARE"/icons/"$PRESET".png
	elif [ -f "$BASEPATH"/"$PRESET"/textures/segment2/segment2.05A00.rgba16.png ]; then
		cp "$BASEPATH"/"$PRESET"/textures/segment2/segment2.05A00.rgba16.png "$SHARE"/icons/"$PRESET".png
		echo 16x16 image from ROM used.  Reccommend replacing "$SHARE"/icons/"$PRESET".png
	else 
		echo WARNING: No icon found. 
		echo Reccommend creating "$SHARE"/icons/"$PRESET".png
	fi	
else
	echo Icon already exists.
fi

if [ ! -f "$SHARE"/applications/"$PRESET".desktop ] && [ "$OSX_BUILD" = 0 ]; then
	echo Creating desktop shorcut and menu entry...
	echo '[Desktop Entry]
Encoding=UTF-8
Type=Application
StartupNotify=false
Categories=Game;'>"$SHARE"/applications/"$PRESET".desktop
echo Icon="$SHARE"/icons/"$PRESET".png >>"$SHARE"/applications/"$PRESET".desktop
echo Name=Super Mario 64 \("$PRESET"\) >>"$SHARE"/applications/"$PRESET".desktop
	if [ "$PRESET" = "sm64ex-coop" ]; then
		echo Path="$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" >>"$SHARE"/applications/"$PRESET".desktop
		echo Exec=\""$BASEPATH"\"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64."$VERSION".f3dex2e --cheats --skip-intro >>"$SHARE"/applications/"$PRESET".desktop
	elif [ "$PRESET" = "sm64-port" ]; then
		echo Path="$SAVEDIR" >>"$SHARE"/applications/"$PRESET".desktop
		printf "Exec=sh -c \"" >>"$SHARE"/applications/"$PRESET".desktop
		echo \""$BASEPATH"\"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64."$VERSION".f3dex2e';echo'\" >>"$SHARE"/applications/"$PRESET".desktop
	elif [ "$PRESET" = "sm64nx" ]; then
		echo Path="$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" >>"$SHARE"/applications/"$PRESET".desktop
		echo Exec=\""$BASEPATH"\"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64."$VERSION".f3dex2e>>"$SHARE"/applications/"$PRESET".desktop
	else # assume ex 
		echo Path="$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" >>"$SHARE"/applications/"$PRESET".desktop
		echo Exec=\""$BASEPATH"\"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64."$VERSION".f3dex2e --cheats --savepath "$SAVEDIR" >>"$SHARE"/applications/"$PRESET".desktop
	fi
	if [ -d ${XDG_DESKTOP_DIR:-$HOME/Desktop} ]; then
		cp "$SHARE"/applications/"$PRESET".desktop ${XDG_DESKTOP_DIR:-$HOME/Desktop}
	fi
	if [ "$USER" = "root" ] && [ -d /usr/share/applications ]; then
		mv -f "$SHARE"/applications/"$PRESET".desktop /usr/share/applications
	fi
elif [ "$OSX_BUILD" = 1 ]; then
	echo Creating macOS AppImage and Desktop Shortcut. ..
 	if [ -f /Applications/'Super Mario 64 ('"$PRESET"')'.app ]; then
 		rm -rf /Applications/'Super Mario 64 ('"$PRESET"')'.app 
	fi
	cd "$BASEPATH"/"$PRESET"
	GITVER=`git rev-parse --short HEAD`
	echo '#!/bin/bash' >"$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64.sh
	echo cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" >>"$SHARE"/applications/"$PRESET".sh >>"$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64.sh
	echo "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64."$VERSION".f3dex2e --cheats --savepath "$SAVEDIR" >>"$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64.sh
	chmod +x "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64.sh
	cd /Applications
	~/go/bin/appify -name 'Super Mario 64 ('"$PRESET"')' -icon "$SHARE"/icons/"$PRESET".png -author smlinux --version "$GITVER" --id "$GIT"-"$BRANCH" "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64.sh
	if [ ! -d $HOME/Desktop/'Super Mario 64 ('"$PRESET"')'.app ]; then
		cd $HOME/Desktop
		ln -s /Applications/'Super Mario 64 ('"$PRESET"')'.app
	fi
else
	echo Menu entry desktop file already exists.
fi
}
rungame(){
if [ "$TARGET_WEB"  = 1 ]; then 
	cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"
	ln -s sm64.us.f3dex2e.html index.html
	python3 -m http.server 8100 &
	if [ -f /usr/bin/firefox ]; then
		firefox --new-window http://localhost:8100&disown
	else
		"$OPEN" http://localhost:8100&disown
	fi
elif [ ! "$ANDROID" = 0 ] ; then
	if [ "$GOTPHONE" = 1 ]; then
		adb shell am start -n com.vdavid003.sm64port/.sm64portActivity
		if [ "$EXTERNAL_DATA" = 1 ]; then
			echo 
			echo When SM64 is launched screen will appear blank while external assets are loaded.
			echo Just wait...
		fi
	elif [ "$EXTERNAL_DATA" = 1 ]; then
		zenity --info --text="Your Android device was not detected so app could not be installed.\nYou must put base assets (base.zip or hdbase.zip) into\nInternal Storage/Android/data/com.vdavid003.sm64port/files\nThis folder will be created when you launch the apk." --title="Transfer External Resources!" --width=470
		echo
		echo "Your Android device was not detected so app could not be installed."
		echo "You must put base assets (base.zip or hdbase.zip) into"
		echo "Internal Storage/Android/data/com.vdavid003.sm64port/files"
		echo 
	fi
	"$OPEN" "$BASEPATH"/"$ANDROID"/app/build/outputs/apk/debug &disown
elif [ "$GIT"  = "djoslin0/sm64ex-coop" ] ; then
	cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"
	./sm64.us.f3dex2e --server 27015 --cheats --savepath "$SAVEDIR" --skip-intro &disown
	sleep 0.3
	./sm64.us.f3dex2e --client 127.0.0.1 27015 --cheats --savepath ! --skip-intro &disown
elif [ "$TARGET" = "dos" ] && [ -f /usr/bin/dosbox ]; then
	dosbox "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64.exe &disown
elif [ "$TARGET" = "dos" ]; then
	echo Cannot test DOS Version from Linux!  I reccomend FreeDOS in VirtualBox.
	"$OPEN" "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"
elif [ "$OSX_BUILD" = 1 ]; then
	/Applications/'Super Mario 64 ('"$PRESET"')'.app/Contents/MacOS/'Super Mario 64 ('"$PRESET"')'.app &
elif command -v gtk-launch &> /dev/null; then
	gtk-launch "$PRESET" &disown
else
	cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"
	./sm64.us.f3dex2e --cheats --savepath "$SAVEDIR" --skip-intro &disown
fi
}

####################################### The Beginning ########################################

SHARE=${XDG_DATA_HOME:-$HOME/.local/share}
SMLINUX="$SHARE"/sm64pc
LAUNCH_DIR=$(pwd)

if [ `uname` = "Darwin" ]; then
	PATHDIR=/usr/local/bin
	OPEN=open
elif command -v xdg-open &> /dev/null; then
	mapfile -t -d: <<<"$PATH"
	PATHDIR="${MAPFILE[0]}"
	OPEN=xdg-open
elif command -v firefox &> /dev/null; then
	mapfile -t -d: <<<"$PATH"
	PATHDIR="${MAPFILE[0]}"
	OPEN=firefox
else 
	mapfile -t -d: <<<"$PATH"
	PATHDIR="${MAPFILE[0]}"
	OPEN="echo URL: "
fi
if [ -z "$1" ] && [ ! -d "$SMLINUX"/.git ]; then
	COMMAND=build
elif [ "$1" = "-help" ] || [ "$1" = "--help" ] || [ "$1" = "-h" ] || [ "$1" = "/?" ]; then
	COMMAND=help
elif [ ! $# -eq 0 ]; then
	COMMAND="$1"
	OP1="$2"
	OP2="$3"
	OP3="$4"
	OP4="$5"
elif command -v whiptail &> /dev/null; then
	export NEWT_COLORS='
	roottext=magenta,black     # title on top
	root=,black                # background
	window=,black              # window background
	border=brightblue,black
	textbox=magenta,black      # after spacebar
	title=blue,black           # make choice with arrows
	checkbox=brightcyan,black  # important list
	compactbutton=blue,black   # ok button'
	if ! COMMAND=$(whiptail --title "Make Choice with Arrows and [Space Bar]" --nocancel --radiolist "        After spacebar press [Enter] to proceed." 14 60 7 \
	 --backtitle "     Super Mario 64 Install * Build * Update Script for Linux and macOS" \
	"update" "update sm64 source and rebuild it" ON \
	"build" "get clean sm64 source and build it" OFF \
	"clone" "get clean sm64 source and extract rom" OFF \
	"reset" "reset smlinux config file to default" OFF \
	"config" "edit smlinux config file only" OFF \
	"depends" "install dependencies only" OFF \
	"upgrade" "upgrade smlinux only" OFF \
	3>&1 1>&2 2>&3); then
		# echo User escape.
		COMMAND=help
		OP1="--noweb"
	fi

fi
export NEWT_COLORS='
roottext=magenta,black     # title on top
root=,black                # background
window=,black              # window background
border=magenta,black        
textbox=brightcyan,black   # editor text
title=blue,black           # make choice with arrows
checkbox=brightcyan,black  # important list
compactbutton=blue,black   # ok button'
# Make sure folders and installer config file exist, if not create them.
if [ ! -d $HOME/.local ]; then 
	mkdir $HOME/.local
fi
if [ ! -d "$SHARE" ]; then 
	mkdir "$SHARE"
fi
if [ ! -f ~/.smlinuxUpdate ]; then
	if [ "$COMMAND" = "config" ]; then
		editconfig
		echo "Thank you for editing your smlinux config file." 
		echo "Do you know how to write a GUI to edit it?"
		echo "If so I would love to use it as a front end."
		echo
		exit
	elif [ "$COMMAND" = "reset" ]; then
		rm "$SMLINUX"/smlinuxcfg.txt
		makeconfig
		echo
		echo smlinux configuration file has been reset to default.
		echo
		exit
	elif [ "$COMMAND" = "upgrade" ]; then
		echo Script upgrade only proceeding...
	elif [ ! -f "$SMLINUX"/smlinuxcfg.txt ]; then
		echo smlinux configuration file not found, so making a new one...
		makeconfig
		doconfig
	elif [ ! "$COMMAND" = "help" ] && [ ! "$COMMAND" = "depends" ]; then
		loadconfig "$COMMAND" "$2" "$3" "$4" "$5" "$6"
		if [ "$CONFIG" = 1 ]; then 
			doconfig
		fi
	fi
	if [ -f "$SMLINUX"/smlinuxcfg.txt ]; then
		echo Loading "$SMLINUX"/smlinuxcfg.txt...
		loadconfig "$COMMAND" "$2" "$3" "$4" "$5" "$6"
	fi
	#Play a sound clip for no reason - thank you for playing my game.
	if [ -f /usr/bin/mplayer ] || [ -f /bin/mplayer ]; then
		if [ -f "$BASEPATH"/sm64pc/sound/samples/sfx_mario_peach/0D.aiff ]; then
			mplayer -nolirc -really-quiet "$BASEPATH"/sm64pc/sound/samples/sfx_mario_peach/0D.aiff&
		elif [ -f "$BASEPATH"/sm64ex/sound/samples/sfx_mario_peach/0D.aiff ]; then
			mplayer -nolirc -really-quiet "$BASEPATH"/sm64ex/sound/samples/sfx_mario_peach/0D.aiff&
		elif [ -f "$BASEPATH"/render96ex/sound/samples/sfx_mario_peach/0D.aiff ]; then
			mplayer -nolirc -really-quiet "$BASEPATH"/render96ex/sound/samples/sfx_mario_peach/0D.aiff&
		elif [ -f "$BASEPATH"/sm64-port/sound/samples/sfx_mario_peach/0D.aiff ]; then
			mplayer -nolirc -really-quiet "$BASEPATH"/sm64-port/sound/samples/sfx_mario_peach/0D.aiff&
		fi
	fi
else
	loadconfig "$COMMAND" "$2" "$3" "$4" "$5" "$6"
fi

if [ "$COMMAND" = "purge" ] || [ "$1" = "--purge" ]; then
	
	echo Wiping...
	rm -rf "$BASEPATH"/sm64pc
	rm -rf "$BASEPATH"/sm64ex
	rm -rf "$BASEPATH"/sm64-port
	rm -rf "$BASEPATH"/sm64nx
	rm -rf "$BASEPATH"/render96ex
	rm -rf "$BASEPATH"/r96proto
	rm -rf "$BASEPATH"/cheaterex
	rm -rf "$BASEPATH"/sm64ex-coop
	rm -rf "$BASEPATH"/sm64-port-android.base
	rm -rf "$BASEPATH"/sm64pc.old
	rm -rf "$BASEPATH"/sm64ex.old
	rm -rf "$BASEPATH"/sm64-port.old
	rm -rf "$BASEPATH"/sm64nx.old
	rm -rf "$BASEPATH"/render96ex.old
	rm -rf "$BASEPATH"/r96proto.old
	rm -rf "$BASEPATH"/cheaterex.old
	rm -rf "$BASEPATH"/sm64ex-coop.old
	rm -rf "$BASEPATH"/sm64-port-android.base.old
	rm -rf "$SMLINUX"
	rm -rf "$SHARE"/sm64ex	
	rm -rf "$SHARE"/sm64-port
	rm -rf "$SHARE"/sm64nx
	rm -rf "$SHARE"/render96ex
	rm -rf "$SHARE"/r96proto
	rm -rf "$SHARE"/cheaterex
	rm -rf "$SHARE"/sm64ex-coop
	rm "$SHARE"/icons/sm64*
	rm "$SHARE"/icons/render96ex*
	rm "$SHARE"/icons/r96proto*
	rm "$SHARE"/icons/cheaterex*
	rm "$SHARE"/applications/sm64*
	rm "$SHARE"/applications/render96ex*
	rm "$SHARE"/applications/r96proto*
	rm "$SHARE"/applications/cheaterex*
	rm ${XDG_DESKTOP_DIR:-$HOME/Desktop}/sm64*.desktop
	rm ${XDG_DESKTOP_DIR:-$HOME/Desktop}/render96ex*.desktop
	rm ${XDG_DESKTOP_DIR:-$HOME/Desktop}/r96proto*.desktop
	rm ${XDG_DESKTOP_DIR:-$HOME/Desktop}/cheaterex*.desktop
	rm $HOME/Downloads/smlinux.*
	echo Note this did not remove any packages installed as build tools or dependencies.
	echo Remove those with your package manager.  Devel libraries can always safely be removed.
	echo And of course you must delete smlinux itself from "$PATHDIR"
        exit
fi

if [ -f ~/.smlinuxUpdate ] && [ "$COMMAND" = "upgrade" ]; then 
	rm ~/.smlinuxUpdate
	echo Script Update Complete.
	exit
elif [ -f ~/.smlinuxUpdate ]; then 
	rm ~/.smlinuxUpdate
	echo Script Update Complete.
else	     # The real start, the rest was script preperation and setup. 
	tput setab 0  # black background
	tput setaf 6  # cyan text
	echo '/---------------------------'"$TIMESTAMP"'-------------------------------------\'
	echo "|                                                                              |"
	echo "|     Super Mario 64 Install * Build * Update Script for Linux and macOS       |"
	echo "|                                                                              |"
	echo "|               Command Line Usage: smlinux <command> <options>                |"
	echo "| Commands                                                                     |"
	echo "|  update: Update existing sm64 source & build (preserves modifications)       |"
	echo "|   build: Get sm64 source from github & build (renames existing folder)       |"
	echo "|   clone: Get sm64 source from github & extract rom (without addons or build) |"
	echo "|  config: Opens smlinuxcfg.txt in a text editor (without building)            |"
	echo "|   reset: Resets smlinux configuration file to default settings               |"
	echo "| depends: Install dependencies (automatic during first smlinux installation)  |"
	echo "| upgrade: Upgrade smlinux to latest version from github (without building)    |"
	echo "|   purge: Delete all files obtained or created by smlinux including sm64      |"
	echo "|    help: Display all smlinux commands and options plus open faq url          |"
	if [ "$COMMAND" = "help" ]; then
		echo "| rebuild: rebuild an existing or previously failed build with no changes      |"
		echo "|                                                                              |"
		echo "| Options:   --hd  install HD add-ons (ignore EnableHD=0/UpgradeHD=0)          |"
		echo "|           --sgi  install Render96 SGI model pack (ignore InstallR96=0)       |"
		echo "|        --config  prompt to edit config file before build (ignore CONFIG=0)   |"
		echo "|       --depends  install dependencies before build                           |"
		echo "|                                                                              |"
		echo "--------------------------------------------------------------------------------"
		tput setaf 7 # white text
		if [ "$OP1" = "--noweb" ]; then
			exit
		else
			echo "More help at https://github.com/enigma9o7/smlinux#frequently-asked-questions"
		fi
		"$OPEN" https://github.com/enigma9o7/smlinux#frequently-asked-questions 
		exit
	else
		echo "|                                                                              |"
		echo "--------------------------------------------------------------------------------"
	fi
	greenecho [1] Preparing for "$COMMAND"...
	if [ ! -d "$SMLINUX"/.git ] || [ "$DEPENDS" = 1 ] || [ "$COMMAND" = "depends" ]; then
		if [ "$OSX_BUILD" = 1 ]; then
			echo "Installing dependencies for macOS..."
			if ! command -v brew &> /dev/null; then
    			echo Installing Homebrew package manager...
				bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
			fi
			if ! command -v brew &> /dev/null; then
				echo FATAL ERROR Could not install homebrew, thus cannot install other stuff.  
				endnow
			fi
			brew install libxdg-basedir coreutils wget newt nano go unzip unrar python3 
			brew install git make gcc@9 mingw-w64 sdl2 pkg-config glew glfw3 libusb audiofile 
			go get github.com/machinebox/appify
		elif command -v sudo &> /dev/null && command -v apt &> /dev/null; then
			echo "Updating package list and installing dependencies..."
			sudo apt update
			if [ "$WINDOW_API" = "SDL1" ]; then
				sudo apt install libsdl1.2-dev
			fi
			$Linux
		elif ! command -v sudo &> /dev/null && command -v apt &> /dev/null && [ "$USER" = "root" ]; then
			echo "Updating package list and installing dependencies..."
			apt update
			apt install -y sudo
			if [ "$WINDOW_API" = "SDL1" ]; then
				apt install libsdl1.2-dev
			fi
			$Linux
		else
			echo "Installing Linux dependencies specified in smlinux configuration file..."
			$Linux
		fi
	fi
	if [ "$COMMAND" = "upgrade" ]; then
		echo Already prepared.
	elif [ "$PRESET" = "sm64nx" ] && ([ ! -d "$BASEPATH"/"$PRESET/build" ] || [ "$COMMAND" = "depends" ]); then
		echo "Installing required build tools for sm64nx..."
		pip3 install pillow zstandard tqdm xxhash
		gcccheck
	elif [ ! "$ANDROID" = 0 ]; then
		echo "Loading Android SDK..."
		androidsdk
	elif [ "$TARGET_WEB" = 1 ]; then
		echo "Loading Enscriptem for Web Target..."
		loademsdk
	elif [ "$TARGET" = "dos" ]; then
		echo "Loading djgpp for DOS Target..."
		dodos
	elif [ ! "$COMMAND" = "depends" ] && [ "$DEPENDS" = 0 ] && [ -d "$SMLINUX"/.git ]; then
		echo "This is not first build, skipping dependencies."
	else
		echo "Done."
	fi
	if [ "$COMMAND" = "depends" ]; then
		theend
	fi
	if [ -f "$SMLINUX"/baserom."$VERSION".z64 ]; then
		if [ ! -f "$BASEPATH"/"$PRESET"/baserom."$VERSION".z64 ]  && [ -d "$BASEPATH"/"$PRESET" ]; then
			ln -s "$SMLINUX"/baserom."$VERSION".z64 "$BASEPATH"/"$PRESET"/baserom."$VERSION".z64
		fi
	elif [ ! "$COMMAND" = "upgrade" ]; then
		echo "Verifying ROM..."
		cd "$LAUNCH_DIR"
		if [ -f "$1" ]; then 
			cp "$1" "$SMLINUX"/baserom."$VERSION".z64
			vettrom
		fi
		if [ ! -f "$SMLINUX"/baserom."$VERSION".z64 ]; then
			if [ -f "$BASEPATH"/sm64pc/baserom."$VERSION".z64 ]; then
				cp "$BASEPATH"/sm64pc/baserom."$VERSION".z64 "$SMLINUX"
				vettrom
			fi
			if [ -f "$BASEPATH"/sm64ex/baserom."$VERSION".z64 ] && [ ! -f "$SMLINUX"/baserom."$VERSION".z64 ]; then
				cp "$BASEPATH"/sm64ex/baserom."$VERSION".z64 "$SMLINUX"
				vettrom
			fi
			if [ -f "$BASEPATH"/sm64-port/baserom."$VERSION".z64 ] && [ ! -f "$SMLINUX"/baserom."$VERSION".z64 ]; then
				cp "$BASEPATH"/sm64-port/baserom."$VERSION".z64 "$SMLINUX"
			vettrom
			fi
		fi
		echo
		if [ -f "$SMLINUX"/baserom."$VERSION".z64 ]; then
			echo Located and Verified.
		elif [ -f "$1" ]; then
			exec 2> >(grep -v GtkDialog >&2) # Supress GTK Dialog Warnings
			zenity --error --text="ERROR: Specified file is not original Super Mario 64 ROM image\nMake sure VERSION= is set to the correct region if not US romfile\n" --title="Your installation is incomplete." --width=640 &disown	
			sleep 1			
			echo "ERROR: Specified file is not original Super Mario 64 ROM image or VERSION set wrong."
			echo
		fi
		if [ ! "$COMMAND" = "upgrade" ]; then
			echo "Please select Super Mario 64 romfile to begin."	
			if [ "$OSX_BUILD" = 1 ]; then
				cd $HOME
				USERFILE=$(osascript -e 'set macpath to choose file' -e 'set unixpath to posix path of macpath')
			else
				exec 2> >(grep -v GtkDialog >&2) # Supress GTK Dialog Warnings
				USERFILE=`zenity --file-selection --title="Select your Super Mario 64 romfile" --filename $HOME/ --file-filter='romfiles | *.z64 *.v64 *.n64' --file-filter='allfiles | *'`
			fi
			if [ -f "$USERFILE" ]; then
				cp "$USERFILE" "$SMLINUX"/baserom."$VERSION".z64
				vettrom
			fi
			if [ ! -f "$SMLINUX"/baserom."$VERSION".z64 ]; then
				echo
				echo "ERROR: Something didnt work like it was supposed to!"
				echo "Try dragging and dropping romfile into this terminal window from file manager."
				echo "Some terminals (including macOS) will paste the filename when you do that."
				echo "If that does not work, some filenmanagers (like pcmanfm) you can right click the"
				echo "file to select \"copy path\" then paste it here followed by enter. "
				echo "Lastly, you can try typing the full path and filename then press enter."
				echo "If that still does not work, romfile must be corrupt or its a smlinux problem."
				echo
				printf "Filename? "
				read USERFILE
				if [ -f "$USERFILE" ]; then
					cp "$USERFILE" "$SMLINUX"/baserom."$VERSION".z64
					vettrom
				fi
			fi
			if [ ! -f "$SMLINUX"/baserom."$VERSION".z64 ]; then
				echo smlinux exiting incomplete. Need valid Super mario 64 N64 romfile to proceed.
				endnow
			fi
		else	
			echo WARNING: No ROM file found.  Please specify a romfile when you are ready to build.
		fi
	fi
	echo
	greenecho [2] Checking Github for smlinux updates....
	if [ "$AutoUpdate" = 1 ] || [ "$COMMAND" = "upgrade" ]; then
		scriptUpdate "$COMMAND" "$2" "$3" "$4" "$5" "$6"
	else
		echo "WARNING: AutoUpdate Disabled. You might be using an old version of smlinux!"
		echo "For the latest fixes and features, please set AutoUpdate=1 in configuration."
	fi
fi

if [ "$COMMAND" = "rebuild" ]; then
	if [ ! -d "$BASEPATH"/"$PRESET" ]; then
		echo
		echo ERROR: No "$BASEPATH"/"$PRESET" folder to rebuild!
		echo Specify smlinux build for a fresh build.
		exit
	fi
	if [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".failed ]; then
		greenecho [3] Restoring failed build...
		if [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" ]; then
			if [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old ]; then
				rm -rf "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old
			fi
			mv "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old
		fi
		mv "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".failed "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"
	else
		greenecho [3] Skipping backups.
	fi
	greenecho [4] Skipping updates.
elif [ "$COMMAND" = "update" ]; then
	if [ ! -d "$BASEPATH"/"$PRESET" ]; then
		echo
		echo ERROR: No "$BASEPATH"/"$PRESET" folder to update!
		echo Specify smlinux build for a fresh build.
		exit
	fi
	echo
	greenecho [3] Checking "$PRESET" github repository for updates...
	if [ ! "$ANDROID" = 0 ]; then
		cd "$BASEPATH"/"$ANDROID"
	else
		cd "$BASEPATH"/"$PRESET"
	fi
	if [ "$PRESET" = "sm64nx" ] && [ -f import/.assets-local.txt ]; then
		rm import/.assets-local.txt
	fi
	git fetch
	if [ "$(git diff HEAD origin/HEAD)" != "" ]; then
		echo Attempting to merge updates....
		git merge
	fi
	if [ "$?" = "1" ]; then
		cd "$BASEPATH"/"$PRESET"
		echo Source update attempt failed, removing patches...
		if [ -f "$BASEPATH"/"$PRESET"/enhancements/3d_coin*.patch ]; then
			git apply -R enhancements/3d_coin*.patch
		fi
		if [ -f "$BASEPATH"/"$PRESET"/enhancements/60fps ]; then
			git apply -R enhancements/60fps*.patch
		fi
		if [ -f "$BASEPATH"/"$PRESET"/enhancements/CHEATER.patch ]; then
			git apply -R enhancements/CHEATER.patch
		fi
		if [ -f "$BASEPATH"/"$PRESET"/enhancements/menu-arrows.patch ]; then
			git apply -R enhancements/menu-arrows.patch
		fi
		git merge
		if [ "$?" = "1" ]; then
			echo ERROR: Unable to merge source updates from github.
			echo Rebuild will continue with existing source.
		else
			echo Update Succesful.
		fi
		echo Reapplying previously removed patches...
		if [ -f "$BASEPATH"/"$PRESET"/enhancements/60fps ]; then
			echo FPS60...
			git apply enhancements/60fps*.patch
		fi
		if [ -f "$BASEPATH"/"$PRESET"/enhancements/3d_coin*.patch ]; then
			echo 3D Coins...
			git apply enhancements/3d_coin*.patch
		fi
		if [ -f "$BASEPATH"/"$PRESET"/enhancements/CHEATER.patch ]; then
			echo Cheater...
			git apply enhancements/CHEATER.patch
		fi
		if [ -f "$BASEPATH"/"$PRESET"/enhancements/menu-arrows.patch ]; then
			echo Menu Arrows...
			git apply enhancements/menu-arrows.patch
		fi
	fi
	if [ ! "$ANDROID" = 0 ]; then
		git submodule init
		git submodule update	
		if [ -d "$BASEPATH"/"$ANDROID"/app/build ]; then
			echo Wiping old Android Build...
			rm -rf "$BASEPATH"/"$ANDROID"/app/build
			rm -rf "$BASEPATH"/"$ANDROID"/app/.externalNativeBuild
		fi
	fi
	echo
	greenecho [4] Applying pre-build modifications...
	if [ "$UpdateHD" = 1 ] && [ "$InstallHD" = 1 ]; then
		dohd
	elif [ "$InstallR96" = 1 ]; then
		printf "SGI Selected, Processing...\n"
		dosgi
	else
		echo WARNING: HD add-ons and updates are disabled in smlinux configuration.
		echo set InstallHD=1 and UpdatehD=1 if you would like these installed and udpated.
	fi
	if [ -f "$BASEPATH"/"$PRESET"/enhancements/60fps*.patch ]; then
		dofps
	fi
	if [ ! "$ANDROID" = 0 ] && [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/gfx ]; then
		cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
		zip -r -0 -u hdbase gfx
		rm -rf gfx
	fi
	docheats
	domymenu
	if [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" ]; then
		if [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old ]; then
			rm -rf "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old
		fi
		mv "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old
	fi
	echo
fi
if [ "$COMMAND" = "update" ]|| [ "$COMMAND" = "rebuild" ]; then
	greenecho [5] Compiling...
	domake
	echo
	if [ ! -f "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64."$VERSION".f3dex2* ]; then
		echo "ERROR: Build Failure - output file not found."  
		if [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old ]; then
			echo "Restoring previous build..."
			if [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" ]; then 
				mv "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".failed
			fi
			mv "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"
		fi
		endnow
	fi
	if [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old/res ] && [ "$ANDROID" = 0 ]; then
		greenecho [6] Restoring External Resources...
		cp -rpn "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old/res/. "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
	elif [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old/romfs ]; then
		echo "[6] Restoring Savefile, ROM and ROM Filesystem (paks)"
		cp -rpn "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old/romfs/. "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs
		ln -s "$SAVEDIR"/sm64.sav "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64.sav 
		ln -s "$SAVEDIR"/sm64.log "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64.log 
		ln -s "$SAVEDIR"/conf.bin "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/conf.bin
	 	ln -s "$SAVEDIR"/gamepad1.bindings.json "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/gamepad1.bindings.json
		ln -s "$SAVEDIR"/keyboard1.bindings.json "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/keyboard1.bindings.json
		ln -s "$SMLINUX"/baserom."$VERSION".z64 "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/baserom."$VERSION".z64
	elif [ "$PRESET" = "sm64nx" ]; then
		echo "[6] Preparing Savefile, ROM and ROM Filesystem (paks)"
		prepnx	
	elif [ "$ANDROID" = 0 ]; then
		greenecho [6] No resources found in previous build, skipping restore.
	fi
	echo
	if [ "$TARGET" = "web" ]; then
		greenecho [7] "$COMMAND" complete.  
	elif [ ! "$ANDROID" = 0 ] && [ ! -f "$BASEPATH"/"$ANDROID"/app/build/outputs/apk/debug/*.apk ]; then
		echo
		echo "ERROR: Build Failure.  Android Package Kit (apk) not found."
		endnow
	elif [ "$ANDROID" = 0 ] && [ "$TARGET" = "pc" ] ; then
		greenecho [7] Verifying Menu Entry....
		makedesktop
		echo
		greenecho [8] "$COMMAND" complete.  
	elif [ ! "$ANDROID" = 0 ]; then
		mv "$BASEPATH"/"$ANDROID"/app/build/outputs/apk/debug/app-debug.apk "$BASEPATH"/"$ANDROID"/app/build/outputs/apk/debug/sm64."$VERSION".f3dex2e.apk
		greenecho [7] "$COMMAND" complete.   
	elif [ "$TARGET" = "dos" ]; then
		mv "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64."$VERSION".f3dex2e.exe "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64.exe
		greenecho [7] "$COMMAND" complete.  
	fi
	rungame
	if [ "$TARGET" = "dos" ] && [ ! -f /usr/bin/dosbox ]; then
		true
	elif [ "$EXTERNAL_DATA" = 0 ]; then
		sleep 5
	elif  ([ "$PRESET" = "render96ex" ] || [ "$PRESET" = "r96proto" ]) && [ "$InstallHD" = 1 ]; then
		sleep 30
	else 
		sleep 10
	fi
	theend
fi
if [ -d "$BASEPATH"/"$PRESET" ]; then
	if [ ! "$ANDROID" = 0 ]; then
		echo WARNING: "$ANDROID" directory already exists! 
		echo Renaming to "$BASEPATH"/"$ANDROID".old...
		if [ -d "$BASEPATH"/"$ANDROID".old ]; then
			rm -rf "$BASEPATH"/"$ANDROID".old
		fi
		mv "$BASEPATH"/"$ANDROID" "$BASEPATH"/"$ANDROID".old
	else
		echo WARNING: "$PRESET" directory already exists!  Renaming to "$PRESET".old...
		if [ -d "$BASEPATH"/"$PRESET".old ]; then
			rm -rf "$BASEPATH"/"$PRESET".old
		fi
		mv "$BASEPATH"/"$PRESET" "$BASEPATH"/"$PRESET".old
		if [ -d "$BASEPATH"/"$PRESET".old/.git  ]; then
			printf "\n[3] Preparing sm64 source from github... \n"
			mkdir "$BASEPATH"/"$PRESET"
			cd "$BASEPATH"/"$PRESET"
			mv "$BASEPATH"/"$PRESET".old/.git .
			git checkout "$BRANCH" -- .
			git pull --no-rebase
		fi
	fi
fi
if [ ! -d "$BASEPATH"/"$PRESET" ]; then
	cd "$BASEPATH"
	if [ ! "$ANDROID" = 0 ]; then
		printf "\n[3] Downloading Android source from github... \n"
		git clone git://github.com/"$GIT" -b "$BRANCH" "$ANDROID"
		cd "$ANDROID"
		git submodule init
		git submodule update
		./getSDL.sh
	else
		printf "\n[3] Downloading sm64 source from github... \n"
		git clone git://github.com/"$GIT" -b "$BRANCH" "$PRESET"
	fi
fi
if [ ! -d "$BASEPATH"/"$PRESET" ]; then
	echo "ERROR: Could not reach github."
	endnow
elif [ ! -f "$BASEPATH"/"$PRESET"/baserom."$VERSION".z64 ]; then
	ln -s "$SMLINUX"/baserom."$VERSION".z64 "$BASEPATH"/"$PRESET"/baserom."$VERSION".z64
fi

echo
greenecho [4] Extracting Assets from ROM...
if [ "$PRESET" = "sm64nx" ]; then
	prepnx
else 	
	cd "$BASEPATH"/"$PRESET"
	./extract_assets.py "$VERSION"
fi
if [ "$COMMAND" = "clone" ]; then
	theend
fi
echo
greenecho [5] Applying Community Enhancements...
SAVEDIR="$SHARE"/"$PRESET"
if [ ! -d "$SAVEDIR" ] && [ "$ANDROID" = 0 ] && [ "$TARGET_WEB" = 0 ]; then
	echo Creating "$SAVEDIR" for save files.
	mkdir "$SAVEDIR"
fi
if [ -f "$SAVEDIR"/sm64config.txt ] || [ -f "$SAVEDIR"/CHEATER64config.txt ]; then
	echo SM64 configuration file found.
elif [ "$PRESET" = "sm64-port" ] || [ "$PRESET" = "sm64nx" ]; then
	echo No compatible sm64 configuration files for this version, game will create one.
elif [ "$TARGET_WEB" = 0 ] && [ "$ANDROID" = 0 ]; then
	if [ -f "$SHARE"/sm64ex/sm64config.txt ]; then
		cp "$SHARE"/sm64ex/sm64config.txt "$SAVEDIR"
		echo Copied configuration from sm64ex.
	elif [ -f "$SMLINUX"/sm64config.txt ]; then
		cp "$SMLINUX"/sm64config.txt "$SAVEDIR"
		echo Copied configuration from sm64pc.
	elif [ -f "$SHARE"/render96ex/sm64config.txt ]; then
		cp "$SHARE"/render96ex/sm64config.txt "$SAVEDIR"
		echo Copied configuration from render96ex
	elif [ -f "$SHARE"/sm64ex-coop/sm64config.txt ]; then
		cp "$SHARE"/sm64ex-coop/sm64config.txt "$SAVEDIR"
		echo Copied configuration from sm64ex-coop
	else 
		echo No compatible sm64 configuration file found, game will create one.
	fi
	if [ "$GIT" = "s4Ys369/cheaterex" ] && [ -f "$SAVEDIR"/sm64config.txt ]; then
		mv "$SAVEDIR"/sm64config.txt "$SAVEDIR"/CHEATER64config.txt
	fi
fi
if [ -f "$SAVEDIR"/sm64_save_file.bin ] || [ -f "$SAVEDIR"/CHEATER64_save_file.bin ] || [ -f "$SAVEDIR"/sm64.sav ] || [ -f "$SAVEDIR"/render96_save_file_0.sav ] ; then
	echo SM64 save file found.
elif [ "$PRESET" = "r96proto" ] && [ -f "$SHARE"/render96ex/render96_save_file_0.sav ]; then
	cp "$SHARE"/render96ex/render96_save_file_0.sav "$SAVEDIR"
	echo Copied Save file from Render96
elif [ "$PRESET" = "render96ex" ] && [ -f "$SHARE"/r96proto/render96_save_file_0.sav ]; then
	cp "$SHARE"/r96proto/render96_save_file_0.sav "$SAVEDIR"
	echo Copied Save file from Render96 Fastbuild_Prototype
elif [ "$TEXTSAVES" = 1 ]; then
	echo No compatible save files for this version.
elif [ "$ANDROID" = 0 ] && [ "$TARGET_WEB" = 0 ]; then
	if [ "$PRESET" = "sm64-port" ] && [ -f "$SHARE"/sm64nx/sm64.sav ]; then
		cp "$SHARE"/sm64nx/sm64.sav "$SAVEDIR"/sm64_save_file.bin
		echo Copied save file from sm64nx.
	elif [ "$PRESET" = "sm64nx" ] && [ -f "$SHARE"/sm64-port/sm64_save_file.bin ]; then
		cp "$SHARE"/sm64-port/sm64_save_file.bin "$SAVEDIR"/sm64.sav
		echo Copied save file from sm64-port.
	elif [ -f "$SHARE"/sm64ex/sm64_save_file.bin ]; then
		cp "$SHARE"/sm64ex/sm64_save_file.bin "$SAVEDIR"
		echo Copied save file from sm64ex.
	elif [ -f "$SHARE"/sm64-port/sm64_save_file.bin ]; then
		cp "$SHARE"/sm64-port/sm64_save_file.bin "$SAVEDIR"
		echo Copied save file from sm64-port.
	elif [ -f "$SMLINUX"/sm64_save_file.bin ]; then
		cp "$SMLINUX"/sm64_save_file.bin "$SAVEDIR"
		echo Copied save file from sm64pc.
	elif [ -f "$SHARE"/cheaterex/CHEATERex_save_file.bin ]; then
		cp "$SHARE"/cheaterex/CHEATER64_save_file.bin "$SAVEDIR"/sm64_save_file.bin
		echo Copied save file from cheaterex
	elif [ -f "$SHARE"/sm64nx/sm64.sav ]; then
		cp "$SHARE"/sm64nx/sm64.sav "$SAVEDIR"/sm64_save_file.bin
		echo Copied save file from sm64nx.
	else 
		echo No compatible save file found.
	fi
	if [ "$GIT" = "s4Ys369/cheaterex" ] && [ -f "$SAVEDIR"/sm64_save_file.bin ]; then
		mv "$SAVEDIR"/sm64_save_file.bin "$SAVEDIR"/CHEATER64_save_file.bin
	fi
fi
if [ "$InstallHD" = 1 ]; then 
	dohd
elif [ "$InstallR96" = 1 ]; then
	dosgi
elif [ "$TARGET" = "pc" ]; then
	echo "WARNING: InstallHD Disabled in Config File so HD addons not being added."
fi
if [ -f "$BASEPATH"/"$PRESET"/enhancements/60fps*.patch ]; then
	dofps
fi
docheats
domymenu
if [ "$PRESET" = "emm-ody" ] && [ ! -f "$BASEPATH"/"$PRESET"smo.cappy_assets.zip ]; then
    echo Getting smo cappy assets...
    cd "$BASEPATH"/"$PRESET" 
    wget -q https://cdn.discordapp.com/attachments/723992726319792140/754402820588961882/smo.cappy_assets.zip
    unzip -q -o smo.cappy_assets
fi
if [ "$BRANCH" = "sm64ex_nightly" ] && [ ! "$TOUCH_CONTROLS" = 1 ]; then
	cd "$BASEPATH"/"$PRESET"
	cp "$SMLINUX"/pro1.patch enhancements
	echo "Applying Pro¹ Customizations..."
	git apply enhancements/pro1.patch
fi
echo
greenecho [6] Compiling...
domake
if [ ! -f "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64."$VERSION".f3dex2* ]; then
	echo
	echo ERROR: Build Failure.  Expected binary file not found.
	endnow
elif [ ! "$ANDROID" = 0 ] && [ ! -f "$BASEPATH"/"$ANDROID"/app/build/outputs/apk/debug/app-debug.apk ]; then
	echo
	echo ERROR: Build Failure.  Expected apk file not found.
	endnow
elif [ ! "$ANDROID" = 0 ]; then
	mv "$BASEPATH"/"$ANDROID"/app/build/outputs/apk/debug/app-debug.apk "$BASEPATH"/"$ANDROID"/app/build/outputs/apk/debug/sm64."$VERSION".f3dex2e.apk
elif [ "$TARGET" = "dos" ]; then
	mv "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64."$VERSION".f3dex2e.exe "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64.exe
fi

echo
if [ "$TARGET" = "pc" ] && [ "$ANDROID" = 0 ]; then
	greenecho [7] Creating Desktop Shortcut and Menu Entry...
	makedesktop
else
	greenecho [7] Skipping menu entry for non PC version.
fi
echo
greenecho [8] Build Succesful!  Testing Application Launch.
rungame
if [ -f "$HOME"/.smlinuxNopath ]; then
	rm "$HOME"/.smlinuxNopath
	exec 2> >(grep -v GtkDialog >&2) # Supress GTK Dialog Warnings
	zenity --info --text="You did not have a home folder in your path so "$HOME"/bin was created.\n\nReboot or type \n\n    PATH=\$HOME/bin:\$PATH\n\nbefore running smlinux again." --title="Your installation is complete." --width=500	
	echo
	echo You did not have a home folder in your path so "$HOME"/bin was created.
	printf 'nReboot or type \n\n      PATH=$HOME/bin:$PATH\n\nbefore running smlinux again.\n\n'
elif [ "$EXTERNAL_DATA" = 0 ]; then
	sleep 4
elif  [ "$GIT" = "render96/render96ex" ] && [ "$InstallHD" = 1 ]; then
	sleep 28
else
	sleep 8
fi
theend
